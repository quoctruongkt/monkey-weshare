[{"/var/www/html/chat-app/game/src/index.js":"1","/var/www/html/chat-app/game/src/reportWebVitals.js":"2","/var/www/html/chat-app/game/src/App.js":"3","/var/www/html/chat-app/game/src/game/GameMenu.js":"4","/var/www/html/chat-app/game/src/game/HeroHealth.js":"5","/var/www/html/chat-app/game/src/game/HeroCoin.js":"6","/var/www/html/chat-app/game/src/game/utils.js":"7","/var/www/html/chat-app/game/src/game/scenes/MainMenuScene.js":"8","/var/www/html/chat-app/game/src/game/DialogBox.js":"9","/var/www/html/chat-app/game/src/game/scenes/BootScene.js":"10","/var/www/html/chat-app/game/src/game/scenes/GameOverScene.js":"11","/var/www/html/chat-app/game/src/game/scenes/GameScene.js":"12","/var/www/html/chat-app/game/src/game/Message.js":"13","/var/www/html/chat-app/game/src/game/constants.js":"14"},{"size":500,"mtime":1649329885000,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1649329885000,"results":"17","hashOfConfig":"16"},{"size":13804,"mtime":1649332764662,"results":"18","hashOfConfig":"16"},{"size":3161,"mtime":1649329885000,"results":"19","hashOfConfig":"16"},{"size":2072,"mtime":1649329885000,"results":"20","hashOfConfig":"16"},{"size":1643,"mtime":1649329885000,"results":"21","hashOfConfig":"16"},{"size":1166,"mtime":1649329885000,"results":"22","hashOfConfig":"16"},{"size":2638,"mtime":1649329885000,"results":"23","hashOfConfig":"16"},{"size":5571,"mtime":1649329885000,"results":"24","hashOfConfig":"16"},{"size":6207,"mtime":1649329885000,"results":"25","hashOfConfig":"16"},{"size":1963,"mtime":1649329885000,"results":"26","hashOfConfig":"16"},{"size":50547,"mtime":1649329885000,"results":"27","hashOfConfig":"16"},{"size":1319,"mtime":1649329885000,"results":"28","hashOfConfig":"16"},{"size":429,"mtime":1649329885000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"164k826",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/var/www/html/chat-app/game/src/index.js",[],["64","65"],"/var/www/html/chat-app/game/src/reportWebVitals.js",[],"/var/www/html/chat-app/game/src/App.js",["66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83"],"import { useCallback, useEffect, useMemo, useState, useRef } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nimport Phaser from \"phaser\";\nimport GridEngine from \"grid-engine\";\nimport BootScene from \"./game/scenes/BootScene\";\nimport MainMenuScene from \"./game/scenes/MainMenuScene\";\nimport GameOverScene from \"./game/scenes/GameOverScene\";\nimport GameScene from \"./game/scenes/GameScene\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport classNames from \"classnames\";\nimport { Backdrop, Fade, Modal, StepIcon, Typography } from \"@material-ui/core\";\nimport dialogBorderBox from \"./game/assets/images/dialog_borderbox.png\";\nimport GameMenu from \"./game/GameMenu\";\nimport DialogBox from \"./game/DialogBox\";\nimport HeroCoin from \"./game/HeroCoin\";\nimport HeroHealth from \"./game/HeroHealth\";\nimport \"./App.css\";\nimport { calculateGameSize } from \"./game/utils\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport apple from \"./game/assets/audio/apple.mp3\";\nimport volume from \"./game/assets/images/volume.png\";\nimport trophy from \"./game/assets/images/trophy.png\";\n\nconst { width, height, multiplier } = calculateGameSize();\nconst host = \"http://localhost:3000\";\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    overflow: \"auto\",\n  },\n  postContainer: {\n    maxWidth: \"90%\",\n    maxHeight: \"90%\",\n  },\n  gameContentWrapper: {\n    width: `${width * multiplier}px`,\n    height: `${height * multiplier}px`,\n    margin: \"auto\",\n    padding: 0,\n    overflow: \"hidden\",\n    \"& canvas\": {\n      imageRendering: \"pixelated\",\n      \"-ms-interpolation-mode\": \"nearest-neighbor\",\n      boxShadow: \"0px 0px 0px 3px rgba(0,0,0,0.75)\",\n    },\n  },\n  pageWrapper: {\n    background: theme.palette.background.paper,\n    padding: 0,\n    margin: 0,\n  },\n  loadingText: {\n    fontFamily: '\"Press Start 2P\"',\n    marginTop: \"30px\",\n    marginLeft: \"30px\",\n  },\n  preLoadDialogImage: {\n    backgroundImage: `url(\"${dialogBorderBox}\")`,\n    backgroundSize: \"1px\",\n    backgroundRepeat: \"no-repeat\",\n  },\n  gameWrapper: {\n    color: \"#FFFFFF\",\n  },\n  gameGif: {\n    width: \"100%\",\n    position: \"absolute\",\n    imageRendering: \"pixelated\",\n    top: 0,\n  },\n}));\n\nconst url = \"https://vysqy4zclvobj.vcdn.cloud/E_Learning/page/\";\n\nconst dialogs = {\n  npc_01: [\n    {\n      message: \"Hello\",\n    },\n  ],\n  npc_02: [\n    {\n      message: \"Hello there\",\n    },\n  ],\n  npc_03: [\n    {\n      message: \"Hi\",\n    },\n  ],\n  npc_04: [\n    {\n      message: \"Hey\",\n    },\n  ],\n  sword: [\n    {\n      message:\n        \"Newton phát hiện ra định luật hấp dẫn sau khi bị quả gì rơi vào đầu?\",\n      answer: \"apple\",\n      audio: apple,\n    },\n  ],\n  apple: [\n    {\n      message: \"Quả gì khi chín đỏ tươi. Ăn vào ngọt mát, da thời đẹp hơn?\",\n      answer: \"apple\",\n      audio: \"apple.mp3\",\n    },\n  ],\n  watermelon: [\n    {\n      message: \"Quả gì nổi tiếng trong sự tích Mai An Tiêm?\",\n      answer: \"watermelon\",\n      audio: \"water_melon.mp3\",\n    },\n  ],\n  pineapple: [\n    {\n      message: \"Quả gì có nhiều mắt nhất?\",\n      answer: \"pineapple\",\n      audio: \"pineapple.mp3\",\n    },\n  ],\n  orange: [\n    {\n      message: \"Quả gì bổ sung nhiều vitamin C cho cơ thể?\",\n      answer: \"orange\",\n      audio: \"orange.mp3\",\n    },\n  ],\n  mango: [\n    {\n      message:\n        \"Lủng liễng trĩu trịt cành cao. Nghe tên cứ ngỡ ngã nhào đất đen?\",\n      answer: \"mango\",\n      audio: \"mango.mp3\",\n    },\n  ],\n  cherries: [\n    {\n      message: \"Quả gì màu đỏ ăn rất ngon?\",\n      answer: \"cherry\",\n      audio: \"cherry.mp3\",\n    },\n  ],\n  banana: [\n    {\n      message: \"Vỏ quả này dẫm phải rất dễ ngã đó nha\",\n      answer: \"banana\",\n      audio: \"banana.mp3\",\n    },\n  ],\n  avocado: [\n    {\n      message:\n        \"Da thì đen mượt, Ruột trắng hơn ngà, Mùi vị đậm đà, Đắt ơi là đắt - Là quả gì?\",\n      answer: \"avocado\",\n      audio: \"avocado.mp3\",\n    },\n  ],\n  push: [\n    {\n      message: \"You can push boxes now\",\n    },\n  ],\n  sign_01: [\n    {\n      message: \"You can read this!\",\n    },\n  ],\n  book_01: [\n    {\n      message: \"Welcome to the game!\",\n    },\n  ],\n};\n\nconst arrQuestion = [\n  \"apple\",\n  \"watermelon\",\n  \"orange\",\n  \"pineapple\",\n  \"cherries\",\n  \"mango\",\n  \"banana\",\n  \"avocado\",\n];\n\nfunction App() {\n  const classes = useStyles();\n  const [messages, setMessages] = useState([]);\n  const [characterName, setCharacterName] = useState(\"\");\n  const [gameMenuItems, setGameMenuItems] = useState([\"hihi\"]);\n  const [gameMenuPosition, setGameMenuPosition] = useState(\"center\");\n  const [heroHealthStates, setHeroHealthStates] = useState([\n    \"full\",\n    \"full\",\n    \"full\",\n  ]);\n  const [heroCoins, setHeroCoins] = useState(0);\n  const [urlAudio, setUrlAudio] = useState(\"\");\n  const [questionIndex, setQuestionIndex] = useState(0);\n\n  const [mess, setMess] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [id, setId] = useState();\n  const [roomId, setRoomId] = useState();\n  const [name, setName] = useState();\n  const [point, setPoint] = useState();\n  const socketRef = useRef();\n  const messagesEnd = useRef();\n\n  var query = window.location.search.substring(1);\n  console.log(query);\n\n  function getQueryVariable(variable) {\n    var query = window.location.search.substring(1);\n    console.log(query); //\"app=article&act=news_content&aid=160990\"\n    var vars = query.split(\"&\");\n    console.log(vars); //[ 'app=article', 'act=news_content', 'aid=160990' ]\n    for (var i = 0; i < vars.length; i++) {\n      var pair = vars[i].split(\"=\");\n      console.log(pair); //[ 'app', 'article' ][ 'act', 'news_content' ][ 'aid', '160990' ]\n      if (pair[0] == variable) {\n        return pair[1];\n      }\n    }\n    return false;\n  }\n  useEffect(() => {\n    console.log(roomId);\n    console.log(name);\n  }, [roomId, name]);\n\n  useEffect(() => {\n    const roomId = getQueryVariable(\"roomid\");\n    const name = getQueryVariable(\"name\");\n    setRoomId(roomId);\n    setName(name);\n\n    socketRef.current = socketIOClient.connect(host, {\n      auth: {\n        name: name,\n      },\n    });\n\n    socketRef.current.on(\"getId\", (data) => {\n      setId(data);\n    });\n\n    socketRef.current.on(\"setUser\", (data) => {\n      console.log(data);\n    });\n    socketRef.current.on(\"changedRank\", (data) => {\n      console.log(data);\n    });\n\n    socketRef.current.on(\"listUser\", (data) => {\n      console.log(data);\n    });\n\n    socketRef.current.emit(\"create\", `room${roomId}`);\n\n    socketRef.current.on(\"sendDataServer\", (dataGot) => {\n      setMess((oldMsgs) => [...oldMsgs, dataGot.data]);\n      scrollToBottom();\n    });\n\n    return () => {\n      socketRef.current.disconnect((id) => {\n        console.log(\"disconnect\");\n      });\n    };\n  }, []);\n\n  const updatePoint = () => {\n    console.log(name);\n    let point = {\n      id: id,\n      point: Math.floor(Math.random() * (100 - 10 + 1) + 10),\n      roomId: `room${roomId}`,\n      name: name,\n    };\n    setPoint(point);\n  };\n  useEffect(() => {\n    socketRef.current.emit(\"changedRank\", point);\n  }, [point]);\n\n  setTimeout(() => {\n    updatePoint();\n  }, 10000);\n\n  const sendMessage = () => {\n    if (message !== null) {\n      const msg = {\n        content: message,\n        id: id,\n        roomId: `room${roomId}`,\n      };\n      socketRef.current.emit(\"sendDataClient\", msg);\n      setMessage(\"\");\n    }\n  };\n\n  const scrollToBottom = () => {\n    messagesEnd.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const renderMess = mess.map((m, index) => (\n    <div\n      key={index}\n      className={`${m.id === id ? \"your-message\" : \"other-people\"} chat-item`}\n    >\n      {m.content}\n    </div>\n  ));\n\n  const handleChange = (e) => {\n    setMessage(e.target.value);\n  };\n\n  const onEnterPress = (e) => {\n    if (e.keyCode == 13 && e.shiftKey == false) {\n      sendMessage();\n    }\n  };\n\n  const handleMessageIsDone = useCallback(() => {\n    const customEvent = new CustomEvent(`${characterName}-dialog-finished`, {\n      detail: {},\n    });\n    window.dispatchEvent(customEvent);\n\n    setMessages([]);\n    setCharacterName(\"\");\n  }, [characterName]);\n\n  const handleMenuItemSelected = useCallback((selectedItem) => {\n    setGameMenuItems([]);\n\n    const customEvent = new CustomEvent(\"menu-item-selected\", {\n      detail: {\n        selectedItem,\n      },\n    });\n    window.dispatchEvent(customEvent);\n  }, []);\n\n  useEffect(() => {\n    const game = new Phaser.Game({\n      type: Phaser.AUTO,\n      title: \"some-game-title\",\n      parent: \"game-content\",\n      orientation: Phaser.Scale.LANDSCAPE,\n      localStorageName: \"some-game-title\",\n      width,\n      height,\n      autoRound: true,\n      pixelArt: true,\n      scale: {\n        autoCenter: Phaser.Scale.CENTER_BOTH,\n        mode: Phaser.Scale.ENVELOP,\n      },\n      scene: [BootScene, MainMenuScene, GameScene, GameOverScene],\n      physics: {\n        default: \"arcade\",\n      },\n      plugins: {\n        scene: [\n          {\n            key: \"gridEngine\",\n            plugin: GridEngine,\n            mapping: \"gridEngine\",\n          },\n        ],\n      },\n      backgroundColor: \"#000000\",\n    });\n\n    window.phaserGame = game;\n  }, []);\n\n  useEffect(() => {\n    if (gameMenuItems.length == 0) {\n      console.log(\"start\");\n      const question = arrQuestion[questionIndex];\n      localStorage.setItem(\"question\", question);\n      setUrlAudio(`${url}${dialogs[question][0].audio}`);\n    }\n  }, [questionIndex, gameMenuItems]);\n\n  useEffect(() => {\n    const dialogBoxEventListener = ({ detail }) => {\n      // TODO fallback\n      detail.characterName === arrQuestion[questionIndex] &&\n        setUrlAudio(`${url}${dialogs[detail.characterName][0].audio}`);\n      setCharacterName(detail.characterName);\n      setMessages(dialogs[detail.characterName]);\n    };\n    window.addEventListener(\"new-dialog\", dialogBoxEventListener);\n\n    const gameMenuEventListener = ({ detail }) => {\n      setGameMenuItems(detail.menuItems);\n      setGameMenuPosition(detail.menuPosition);\n    };\n    window.addEventListener(\"menu-items\", gameMenuEventListener);\n\n    const heroHealthEventListener = ({ detail }) => {\n      // console.log(detail);\n      setHeroHealthStates(detail.healthStates);\n    };\n    window.addEventListener(\"hero-health\", heroHealthEventListener);\n\n    const heroCoinEventListener = ({ detail }) => {\n      // setHeroCoins(detail.heroCoins);\n    };\n    window.addEventListener(\"hero-coin\", heroCoinEventListener);\n\n    return () => {\n      window.removeEventListener(\"new-dialog\", dialogBoxEventListener);\n      window.removeEventListener(\"menu-items\", gameMenuEventListener);\n      window.removeEventListener(\"hero-health\", heroHealthEventListener);\n      window.removeEventListener(\"hero-coin\", heroCoinEventListener);\n    };\n  }, [setCharacterName, setMessages]);\n  console.log(gameMenuItems);\n  return (\n    <div>\n      {gameMenuItems.length == 0 && (\n        <div class=\"leaderboard\">\n          <h1>\n            <img src={trophy} />\n            Leader Board\n          </h1>\n          <ol>\n            <li>Jerry Wood</li>\n            <li>Brandon Barnes</li>\n            <li>Raymond Knight</li>\n            <li>Trevor McCormick</li>\n            <li>Andrew Fox</li>\n          </ol>\n        </div>\n      )}\n      <ReactAudioPlayer\n        src={urlAudio}\n        autoPlay={true}\n        controls\n        style={{ display: \"none\" }}\n        onEnded={() => setUrlAudio(\"\")}\n      />\n      <div className={classes.gameWrapper}>\n        <div id=\"game-content\" className={classes.gameContentWrapper}>\n          {/* this is where the game canvas will be rendered */}\n        </div>\n        {gameMenuItems.length === 0 && (\n          <button\n            onClick={() =>\n              setUrlAudio(\n                `${url}${dialogs[localStorage.getItem(\"question\")][0].audio}`\n              )\n            }\n            style={{\n              position: \"fixed\",\n              right: \"500px\",\n              top: \"40px\",\n              backgroundColor: \"transparent\",\n              border: 0,\n              cursor: \"pointer\",\n            }}\n          >\n            <img src={volume} />\n          </button>\n        )}\n        {heroHealthStates.length > 0 && (\n          <HeroHealth\n            gameSize={{\n              width,\n              height,\n              multiplier,\n            }}\n            healthStates={heroHealthStates}\n          />\n        )}\n        {heroCoins !== null && (\n          <HeroCoin\n            gameSize={{\n              width,\n              height,\n              multiplier,\n            }}\n            heroCoins={heroCoins}\n          />\n        )}\n        {messages.length > 0 && (\n          <DialogBox\n            onDone={handleMessageIsDone}\n            characterName={characterName}\n            messages={messages}\n            gameSize={{\n              width,\n              height,\n              multiplier,\n            }}\n            setHeroCoins={setHeroCoins}\n            setHeroHealthStates={setHeroHealthStates}\n            question={arrQuestion[questionIndex]}\n            setQuestionIndex={setQuestionIndex}\n            heroHealthStates={heroHealthStates}\n          />\n        )}\n        {gameMenuItems.length > 0 && (\n          <GameMenu\n            items={gameMenuItems}\n            gameSize={{\n              width,\n              height,\n              multiplier,\n            }}\n            position={gameMenuPosition}\n            onSelected={handleMenuItemSelected}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/var/www/html/chat-app/game/src/game/GameMenu.js",[],"/var/www/html/chat-app/game/src/game/HeroHealth.js",[],"/var/www/html/chat-app/game/src/game/HeroCoin.js",[],"/var/www/html/chat-app/game/src/game/utils.js",[],"/var/www/html/chat-app/game/src/game/scenes/MainMenuScene.js",[],"/var/www/html/chat-app/game/src/game/DialogBox.js",["84","85"],"import { useCallback, useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useForm } from \"react-hook-form\";\nimport dungAudio from \"./assets/audio/dung.mp3\";\nimport saiAudio from \"./assets/audio/sai.wav\";\n\n// Images\nimport dialogBorderBox from \"./assets/images/dialog_borderbox.png\";\n\n// Components\nimport Message from \"./Message\";\nimport ReactAudioPlayer from \"react-audio-player\";\n\nconst useStyles = makeStyles((theme) => ({\n  dialogWindow: ({ width, height, multiplier }) => {\n    const messageBoxHeight = Math.ceil((height / 3.5) * multiplier);\n    return {\n      imageRendering: \"pixelated\",\n      fontFamily: '\"Press Start 2P\"',\n      textTransform: \"uppercase\",\n      backgroundColor: \"#e2b27e\",\n      border: \"solid\",\n      borderImage: `url(\"${dialogBorderBox}\") 6 / ${6 * multiplier}px ${\n        6 * multiplier\n      }px ${6 * multiplier}px ${6 * multiplier}px stretch`,\n      padding: `${8 * multiplier}px`,\n      position: \"absolute\",\n      top: `${Math.ceil(\n        height * multiplier - (messageBoxHeight + messageBoxHeight * 0.1) - 50\n      )}px`,\n      width: `${Math.ceil(width * 0.8 * multiplier)}px`,\n      left: \"50%\",\n      transform: \"translate(-50%, 0%)\",\n      minHeight: `${messageBoxHeight}px`,\n    };\n  },\n  dialogTitle: ({ multiplier }) => ({\n    fontSize: `${8 * multiplier}px`,\n    marginBottom: `${6 * multiplier}px`,\n    fontWeight: \"bold\",\n  }),\n  dialogFooter: ({ multiplier }) => ({\n    fontSize: `${8 * multiplier}px`,\n    cursor: \"pointer\",\n    textAlign: \"end\",\n    position: \"absolute\",\n    right: `${6 * multiplier}px`,\n    bottom: `${6 * multiplier}px`,\n  }),\n  buttonSubmit: ({ multiplier }) => ({\n    fontSize: `${8 * multiplier}px`,\n    marginLeft: \"20px\",\n  }),\n  input: ({ multiplier }) => ({\n    fontSize: `${8 * multiplier}px`,\n  }),\n}));\n\nconst DialogBox = ({\n  messages,\n  characterName,\n  onDone,\n  gameSize,\n  setHeroCoins,\n  question,\n  setHeroHealthStates,\n  setQuestionIndex,\n  heroHealthStates,\n}) => {\n  const { register, handleSubmit } = useForm();\n  const { width, height, multiplier } = gameSize;\n\n  const [currentMessage, setCurrentMessage] = useState(0);\n  const [messageEnded, setMessageEnded] = useState(false);\n  const [forceShowFullMessage, setForceShowFullMessage] = useState(false);\n  const [results, setResults] = useState(\"\");\n  const [urlAudio, setUrlAudio] = useState(\"\");\n  const classes = useStyles({\n    width,\n    height,\n    multiplier,\n  });\n\n  const onSubmit = (data) => {\n    const input = data.textInput.toLowerCase();\n    if (input === messages[0].answer) {\n      setHeroCoins((pre) => pre + 5);\n      setUrlAudio(dungAudio);\n      setResults(\"Đúng rồi\");\n    } else {\n      setUrlAudio(saiAudio);\n      setHeroCoins((pre) => pre - 5);\n      setResults(\"Sai rồi\");\n    }\n  };\n\n  const handleClick = useCallback(() => {\n    if (characterName === question) {\n      if (messageEnded) {\n        setMessageEnded(false);\n        setForceShowFullMessage(false);\n        if (currentMessage < messages.length - 1) {\n          setCurrentMessage(currentMessage + 1);\n        } else {\n          setCurrentMessage(0);\n          onDone();\n          setQuestionIndex((pre) => pre + 1);\n        }\n      } else {\n        setMessageEnded(true);\n        setForceShowFullMessage(true);\n      }\n    } else {\n      onDone();\n    }\n  }, [currentMessage, messageEnded, messages.length, onDone]);\n\n  useEffect(() => {\n    const handleKeyPressed = (e) => {\n      if ([\"Space\", \"Escape\"].includes(e.code)) {\n        handleClick();\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyPressed);\n\n    return () => window.removeEventListener(\"keydown\", handleKeyPressed);\n  }, [handleClick]);\n\n  useEffect(() => {\n    if (characterName !== question) {\n      setHeroHealthStates(\n        heroHealthStates.filter((item, i) => i !== heroHealthStates.length - 1)\n      );\n      setUrlAudio(saiAudio);\n    } else {\n      setHeroCoins((pre) => pre + 5);\n      // setUrlAudio(dungAudio);\n    }\n  }, []);\n\n  return (\n    <div className={classes.dialogWindow}>\n      <ReactAudioPlayer\n        src={urlAudio}\n        autoPlay\n        controls\n        style={{ display: \"none\" }}\n      />\n      <div className={classes.dialogTitle}>Quả gì?</div>\n      {characterName === question ? (\n        <>\n          <Message\n            action={messages[currentMessage].action}\n            message={messages[currentMessage].message}\n            key={currentMessage}\n            multiplier={multiplier}\n            forceShowFullMessage={forceShowFullMessage}\n            onMessageEnded={() => {\n              setMessageEnded(true);\n            }}\n          />\n          {!results ? (\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <div style={{ marginTop: \"30px\" }}>\n                <input\n                  type=\"text\"\n                  {...register(\"textInput\")}\n                  placeholder=\"Nhập từ vừa nghe được\"\n                  className={classes.input}\n                />\n                <button type=\"submit\" className={classes.buttonSubmit}>\n                  Kiểm tra\n                </button>\n              </div>\n            </form>\n          ) : (\n            <div>{results}</div>\n          )}\n        </>\n      ) : (\n        <div>Bạn đã chọn sai</div>\n      )}\n      <div onClick={handleClick} className={classes.dialogFooter}>\n        Bỏ qua\n        {/* {currentMessage === messages.length - 1 && messageEnded\n          ? \"Bỏ qua\"\n          : \"Next\"} */}\n      </div>\n    </div>\n  );\n};\n\nexport default DialogBox;\n","/var/www/html/chat-app/game/src/game/scenes/BootScene.js",["86","87","88","89","90","91","92","93"],"import { Scene } from \"phaser\";\n\n// Houses files\nimport homePageHouse01Map from \"../assets/sprites/maps/houses/home_page_city_house_01.json\";\nimport homePageHouse02Map from \"../assets/sprites/maps/houses/home_page_city_house_02.json\";\nimport homePageHouse03Map from \"../assets/sprites/maps/houses/home_page_city_house_03.json\";\n\n// Cities files\nimport homePageCity from \"../assets/sprites/maps/cities/home_page_city.json\";\n\n// Characters files\nimport heroJson from \"../assets/sprites/atlas/hero.json\";\nimport slimeJson from \"../assets/sprites/atlas/slime.json\";\nimport heartJson from \"../assets/sprites/atlas/heart.json\";\nimport coinJson from \"../assets/sprites/atlas/coin.json\";\n\n// NPC jsons\nimport npc01Json from \"../assets/sprites/atlas/npc_01.json\";\nimport npc02Json from \"../assets/sprites/atlas/npc_02.json\";\nimport npc03Json from \"../assets/sprites/atlas/npc_03.json\";\nimport npc04Json from \"../assets/sprites/atlas/npc_04.json\";\n\n// Images\nimport heroImage from \"../assets/sprites/atlas/hero.png\";\nimport slimeImage from \"../assets/sprites/atlas/slime.png\";\nimport heartImage from \"../assets/sprites/atlas/heart.png\";\nimport coinImage from \"../assets/sprites/atlas/coin.png\";\nimport tilesetImage from \"../assets/sprites/maps/tilesets/tileset.png\";\nimport mainMenuBackgroundImage from \"../assets/images/main_menu_background.png\";\nimport gameOverBackgroundImage from \"../assets/images/game_over_background.png\";\nimport gameLogoImage from \"../assets/images/game_logo.png\";\nimport heartContainerImage from \"../assets/images/heart_container.png\";\nimport swordImage from \"../assets/images/sword.png\";\nimport pushImage from \"../assets/images/push.png\";\nimport appleImage from \"../assets/images/apple.png\";\nimport avocadoImage from \"../assets/images/avocado.png\";\nimport bananaImage from \"../assets/images/banana.png\";\nimport cherriesImage from \"../assets/images/cherries.png\";\nimport orangeImage from \"../assets/images/orange.png\";\nimport pineappleImage from \"../assets/images/pineapple.png\";\nimport watermelonImage from \"../assets/images/watermelon.png\";\n\n// NPC images\nimport npc01Image from \"../assets/sprites/atlas/npc_01.png\";\nimport npc02Image from \"../assets/sprites/atlas/npc_02.png\";\nimport npc03Image from \"../assets/sprites/atlas/npc_03.png\";\nimport npc04Image from \"../assets/sprites/atlas/npc_04.png\";\n\nexport default class BootScene extends Scene {\n  constructor() {\n    super(\"BootScene\");\n  }\n\n  preload() {\n    const fontSize = 16;\n\n    // setup loading bar\n    const progressBar = this.add.graphics();\n    const progressBox = this.add.graphics();\n    const { width: gameWidth, height: gameHeight } = this.cameras.main;\n\n    const barPositionX = Math.ceil((gameWidth - gameWidth * 0.7) / 2);\n    progressBox.fillStyle(0x222222, 0.8);\n    progressBox.fillRect(\n      barPositionX,\n      Math.ceil(gameHeight / 6),\n      Math.ceil(gameWidth * 0.7),\n      Math.ceil(gameHeight / 10)\n    );\n\n    const loadingText = this.add.text(\n      gameWidth / 2,\n      Math.ceil(gameHeight / 10),\n      \"loading...\",\n      {\n        fontFamily: '\"Press Start 2P\"',\n        fontSize: `${fontSize}px`,\n        size: `${fontSize}px`,\n        fill: \"#ffffff\",\n        color: \"#ffffff\",\n      }\n    );\n\n    loadingText.setOrigin(0.5);\n    loadingText.setResolution(30);\n\n    const percentText = this.add.text(\n      gameWidth / 2,\n      Math.ceil(gameHeight / 6 + fontSize / 2 + gameHeight / 60),\n      \"0%\",\n      {\n        fontFamily: '\"Press Start 2P\"',\n        fontSize: `${fontSize}px`,\n        size: `${fontSize}px`,\n        fill: \"#ffffff\",\n        color: \"#ffffff\",\n      }\n    );\n\n    percentText.setOrigin(0.5);\n    percentText.setResolution(30);\n\n    const assetText = this.add.text(\n      gameWidth / 2,\n      Math.ceil(gameHeight / 3),\n      \"\",\n      {\n        fontFamily: '\"Press Start 2P\"',\n        fontSize: `${fontSize / 2}px`,\n        size: `${fontSize / 2}px`,\n        fill: \"#ffffff\",\n        color: \"#ffffff\",\n      }\n    );\n\n    assetText.setOrigin(0.5);\n    assetText.setResolution(30);\n\n    this.load.on(\"progress\", (value) => {\n      progressBar.clear();\n      progressBar.fillStyle(0xffffff, 1);\n      progressBar.fillRect(\n        barPositionX,\n        Math.ceil(gameHeight / 6),\n        Math.ceil(gameWidth * 0.7) * value,\n        Math.ceil(gameHeight / 10)\n      );\n      percentText.setText(`${Number.parseInt(value * 100, 10)}%`);\n    });\n\n    this.load.on(\"fileprogress\", (file) => {\n      assetText.setText(`loading: ${file.key}`);\n    });\n\n    this.load.on(\"complete\", () => {\n      progressBar.destroy();\n      progressBox.destroy();\n      percentText.destroy();\n      assetText.destroy();\n    });\n\n    // Maps\n    this.load.tilemapTiledJSON(\"home_page_city\", homePageCity);\n    this.load.tilemapTiledJSON(\"home_page_city_house_01\", homePageHouse01Map);\n    this.load.tilemapTiledJSON(\"home_page_city_house_02\", homePageHouse02Map);\n    this.load.tilemapTiledJSON(\"home_page_city_house_03\", homePageHouse03Map);\n\n    // Atlas\n    this.load.atlas(\"hero\", heroImage, heroJson);\n    this.load.atlas(\"slime\", slimeImage, slimeJson);\n    this.load.atlas(\"heart\", heartImage, heartJson);\n    this.load.atlas(\"coin\", coinImage, coinJson);\n\n    // NPCs\n    // this.load.atlas(\"npc_01\", npc01Image, npc01Json);\n    // this.load.atlas(\"npc_02\", npc02Image, npc02Json);\n    // this.load.atlas(\"npc_03\", npc03Image, npc03Json);\n    // this.load.atlas(\"npc_04\", npc04Image, npc04Json);\n\n    // Tilesets\n    this.load.image(\"tileset\", tilesetImage);\n\n    // Images\n    this.load.image(\"main_menu_background\", mainMenuBackgroundImage);\n    this.load.image(\"game_over_background\", gameOverBackgroundImage);\n    this.load.image(\"game_logo\", gameLogoImage);\n    this.load.image(\"heart_container\", heartContainerImage);\n    this.load.image(\"sword\", swordImage);\n    this.load.image(\"push\", pushImage);\n    this.load.image(\"apple\", appleImage);\n    this.load.image(\"avocado\", avocadoImage);\n    this.load.image(\"banana\", bananaImage);\n    this.load.image(\"cherries\", cherriesImage);\n    this.load.image(\"orange\", orangeImage);\n    this.load.image(\"pineapple\", pineappleImage);\n    this.load.image(\"watermelon\", watermelonImage);\n  }\n\n  create() {\n    this.scene.start(\"MainMenuScene\");\n  }\n}\n","/var/www/html/chat-app/game/src/game/scenes/GameOverScene.js",["94"],"import { Scene } from 'phaser';\n\nexport default class MainMenuScene extends Scene {\n    constructor() {\n        super('GameOverScene');\n    }\n\n    preload() {\n        // TODO\n    }\n\n    create() {\n        const fontSize = 24;\n        const { width: gameWidth, height: gameHeight } = this.cameras.main;\n\n        const gameOverText = this.add.text(\n            gameWidth / 2,\n            Math.ceil(gameHeight / 5),\n            'game over',\n            {\n                fontFamily: '\"Press Start 2P\"',\n                fontSize: `${fontSize}px`,\n                size: `${fontSize}px`,\n                fill: '#ffffff',\n                color: '#ffffff',\n            }\n        ).setDepth(10).setOrigin(0.5, 0.5);\n\n        const scale = Math.max(Math.ceil(gameWidth / 220), Math.ceil(gameHeight / 124));\n        this.add.image(0, 0, 'game_over_background')\n            .setScale(scale)\n            .setDepth(0)\n            .setOrigin(0, 0);\n\n        const customEvent = new CustomEvent('menu-items', {\n            detail: {\n                menuItems: ['game.game_over.retry', 'game.game_over.exit'],\n                menuPosition: 'center',\n            },\n        });\n\n        window.dispatchEvent(customEvent);\n        const gameMenuSelectedEventListener = ({ detail }) => {\n            switch (detail.selectedItem) {\n                case 'game.game_over.retry': {\n                    this.scene.start('MainMenuScene');\n                    break;\n                }\n\n                case 'game.game_over.exit': {\n                    window.location.reload();\n                    break;\n                }\n\n                default: {\n                    break;\n                }\n            }\n\n            window.removeEventListener(\n                'menu-item-selected',\n                gameMenuSelectedEventListener\n            );\n        };\n\n        window.addEventListener(\n            'menu-item-selected',\n            gameMenuSelectedEventListener\n        );\n    }\n}\n","/var/www/html/chat-app/game/src/game/scenes/GameScene.js",["95","96","97","98","99"],"import { Input, Math as PhaserMath, Scene } from \"phaser\";\nimport { createInteractiveGameObject } from \"../utils\";\nimport {\n  ATTACK_DELAY_TIME,\n  BOX_INDEX,\n  BUSH_INDEX,\n  ENEMY_AI_TYPE,\n  NPC_MOVEMENT_RANDOM,\n  SCENE_FADE_TIME,\n} from \"../constants\";\n\nexport default class GameScene extends Scene {\n  constructor() {\n    super(\"GameScene\");\n  }\n\n  enterKey = {};\n  spaceKey = {};\n  cursors = {};\n  // wasd = {};\n  isShowingDialog = false;\n  isTeleporting = false;\n  isAttacking = false;\n\n  init(data) {\n    this.initData = data;\n  }\n\n  calculatePreviousTeleportPosition() {\n    const currentPosition = this.gridEngine.getPosition(\"hero\");\n    const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n\n    switch (facingDirection) {\n      case \"up\": {\n        return {\n          x: currentPosition.x,\n          y: currentPosition.y + 1,\n        };\n      }\n\n      case \"right\": {\n        return {\n          x: currentPosition.x - 1,\n          y: currentPosition.y,\n        };\n      }\n\n      case \"down\": {\n        return {\n          x: currentPosition.x,\n          y: currentPosition.y - 1,\n        };\n      }\n\n      case \"left\": {\n        return {\n          x: currentPosition.x + 1,\n          y: currentPosition.y,\n        };\n      }\n\n      default: {\n        return {\n          x: currentPosition.x,\n          y: currentPosition.y,\n        };\n      }\n    }\n  }\n\n  getFramesForAnimation(assetKey, animation) {\n    return this.anims\n      .generateFrameNames(assetKey)\n      .filter((frame) => {\n        if (frame.frame.includes(`${assetKey}_${animation}`)) {\n          const parts = frame.frame.split(`${assetKey}_${animation}_`);\n          return Boolean(!Number.isNaN(Number.parseInt(parts[1], 10)));\n        }\n\n        return false;\n      })\n      .sort((a, b) => (a.frame < b.frame ? -1 : 1));\n  }\n\n  createPlayerWalkingAnimation(assetKey, animationName) {\n    this.anims.create({\n      key: `${assetKey}_${animationName}`,\n      frames: [\n        { key: assetKey, frame: `${assetKey}_${animationName}_01` },\n        {\n          key: assetKey,\n          frame: `${assetKey}_${animationName.replace(\"walking\", \"idle\")}_01`,\n        },\n        { key: assetKey, frame: `${assetKey}_${animationName}_02` },\n      ],\n      frameRate: 4,\n      repeat: -1,\n      yoyo: true,\n    });\n  }\n\n  createPlayerAttackAnimation(assetKey, animationName) {\n    this.anims.create({\n      key: `${assetKey}_${animationName}`,\n      frames: [\n        { key: assetKey, frame: `${assetKey}_${animationName}_01` },\n        { key: assetKey, frame: `${assetKey}_${animationName}_02` },\n        { key: assetKey, frame: `${assetKey}_${animationName}_03` },\n        { key: assetKey, frame: `${assetKey}_${animationName}_04` },\n        {\n          key: assetKey,\n          frame: `${assetKey}_${animationName.replace(\"attack\", \"idle\")}_01`,\n        },\n      ],\n      frameRate: 16,\n      repeat: 0,\n      yoyo: false,\n    });\n  }\n\n  getStopFrame(direction, spriteKey) {\n    switch (direction) {\n      case \"up\":\n        return `${spriteKey}_idle_up_01`;\n      case \"right\":\n        return `${spriteKey}_idle_right_01`;\n      case \"down\":\n        return `${spriteKey}_idle_down_01`;\n      case \"left\":\n        return `${spriteKey}_idle_left_01`;\n      default:\n        return null;\n    }\n  }\n\n  getOppositeDirection(direction) {\n    switch (direction) {\n      case \"up\":\n        return \"down\";\n      case \"right\":\n        return \"left\";\n      case \"down\":\n        return \"up\";\n      case \"left\":\n        return \"right\";\n      default:\n        return null;\n    }\n  }\n\n  getBackPosition(facingDirection, position) {\n    switch (facingDirection) {\n      case \"up\":\n        return {\n          ...position,\n          y: position.y + 1,\n        };\n      case \"right\":\n        return {\n          ...position,\n          x: position.x - 1,\n        };\n      case \"down\":\n        return {\n          ...position,\n          y: position.y - 1,\n        };\n      case \"left\":\n        return {\n          ...position,\n          x: position.x + 1,\n        };\n      default:\n        return position;\n    }\n  }\n\n  extractTeleportDataFromTiled(data) {\n    const [mapKey, position] = data.trim().split(\":\");\n    const [x, y] = position.split(\",\");\n\n    return {\n      mapKey,\n      x: Number.parseInt(x, 10),\n      y: Number.parseInt(y, 10),\n    };\n  }\n\n  extractNpcDataFromTiled(data) {\n    const [npcKey, config] = data.trim().split(\":\");\n    const [movementType, delay, area, direction] = config.split(\";\");\n\n    return {\n      npcKey,\n      movementType,\n      facingDirection: direction,\n      delay: Number.parseInt(delay, 10),\n      area: Number.parseInt(area, 10),\n    };\n  }\n\n  calculateHeroHealthState(health) {\n    if (health > 10) {\n      return \"full\";\n    }\n\n    if (health > 0) {\n      return \"half\";\n    }\n\n    return \"empty\";\n  }\n\n  calculateHeroHealthStates() {\n    return Array.from({ length: this.heroSprite.maxHealth / 20 })\n      .fill(null)\n      .map((v, index) =>\n        this.calculateHeroHealthState(\n          Math.max(this.heroSprite.health - 20 * index, 0)\n        )\n      );\n  }\n\n  updateHeroHealthUi(healthStates) {\n    const customEvent = new CustomEvent(\"hero-health\", {\n      detail: {\n        healthStates,\n      },\n    });\n\n    window.dispatchEvent(customEvent);\n  }\n\n  updateHeroCoinUi(heroCoins) {\n    const customEvent = new CustomEvent(\"hero-coin\", {\n      detail: {\n        heroCoins,\n      },\n    });\n\n    window.dispatchEvent(customEvent);\n  }\n\n  getEnemySpecies(enemyType) {\n    if (enemyType.includes(\"slime\")) {\n      return \"slime\";\n    }\n\n    return \"slime\";\n  }\n\n  getEnemyColor(enemyType) {\n    if (enemyType.includes(\"red\")) {\n      return 0xf1374b;\n    }\n\n    if (enemyType.includes(\"green\")) {\n      return 0x2bbd6e;\n    }\n\n    if (enemyType.includes(\"yellow\")) {\n      return 0xffff4f;\n    }\n\n    return 0x00a0dc;\n  }\n\n  getEnemyAttackSpeed(enemyType) {\n    if (enemyType.includes(\"red\")) {\n      return 2000;\n    }\n\n    if (enemyType.includes(\"green\")) {\n      return 3000;\n    }\n\n    if (enemyType.includes(\"yellow\")) {\n      return 4000;\n    }\n\n    return 5000;\n  }\n\n  spawnItem(position) {\n    const isDebugMode = this.physics.config.debug;\n    const itemChance = PhaserMath.Between(1, isDebugMode ? 2 : 5);\n    if (itemChance === 1) {\n      const itemType = PhaserMath.Between(1, 2);\n\n      if (itemType === 1) {\n        const item = this.physics.add\n          .sprite(position.x, position.y, \"heart\")\n          .setDepth(1)\n          .setOrigin(0, 0);\n        item.itemType = \"heart\";\n        this.itemsSprites.add(item);\n        item.anims.play(\"heart_idle\");\n      } else if (itemType === 2) {\n        const item = this.physics.add\n          .sprite(position.x, position.y, \"coin\")\n          .setDepth(1)\n          .setOrigin(0, 0);\n        item.itemType = \"coin\";\n        this.itemsSprites.add(item);\n        item.anims.play(\"coin_idle\");\n      }\n    }\n  }\n\n  calculatePushTilePosition() {\n    const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n    const position = this.gridEngine.getPosition(\"hero\");\n\n    switch (facingDirection) {\n      case \"up\":\n        return {\n          x: position.x * 16,\n          y: (position.y - 2) * 16,\n        };\n\n      case \"right\":\n        return {\n          x: (position.x + 2) * 16,\n          y: position.y * 16,\n        };\n\n      case \"down\":\n        return {\n          x: position.x * 16,\n          y: (position.y + 2) * 16,\n        };\n\n      case \"left\":\n        return {\n          x: (position.x - 2) * 16,\n          y: position.y * 16,\n        };\n\n      default:\n        return {\n          x: position.x * 16,\n          y: position.y * 16,\n        };\n    }\n  }\n\n  create() {\n    const camera = this.cameras.main;\n    const { game } = this.sys;\n    const isDebugMode = this.physics.config.debug;\n    const { heroStatus, mapKey } = this.initData;\n    const {\n      position: initialPosition,\n      frame: initialFrame,\n      facingDirection: initialFacingDirection,\n      previousPosition,\n      health: heroHealth,\n      maxHealth: heroMaxHealth,\n      coin: heroCoin,\n      canPush: heroCanPush,\n      haveSword: heroHaveSword,\n      haveApple: heroHaveApple,\n      haveAvocado: heroHaveAvocado,\n      haveBanana: heroHaveBanana,\n      haveCherries: heroHaveCherries,\n      haveOrange: heroHaveOrange,\n      havePineapple: heroHavePineapple,\n      haveWatermelon: heroHaveWatermelon,\n    } = heroStatus;\n\n    camera.fadeIn(SCENE_FADE_TIME);\n\n    this.enterKey = this.input.keyboard.addKey(Input.Keyboard.KeyCodes.ENTER);\n    this.spaceKey = this.input.keyboard.addKey(Input.Keyboard.KeyCodes.SPACE);\n    this.cursors = this.input.keyboard.createCursorKeys();\n    // this.wasd = this.input.keyboard.addKeys({\n    //     up: Input.Keyboard.KeyCodes.W,\n    //     down: Input.Keyboard.KeyCodes.S,\n    //     left: Input.Keyboard.KeyCodes.A,\n    //     right: Input.Keyboard.KeyCodes.D,\n    // });\n\n    // Map\n    const map = this.make.tilemap({ key: mapKey });\n    map.addTilesetImage(\"tileset\", \"tileset\");\n\n    if (isDebugMode) {\n      window.phaserGame = game;\n      this.map = map;\n    }\n\n    // Hero\n    this.heroSprite = this.physics.add\n      .sprite(0, 0, \"hero\", initialFrame)\n      .setDepth(1);\n    this.heroSprite.health = heroHealth;\n    this.heroSprite.maxHealth = heroMaxHealth;\n    this.heroSprite.coin = heroCoin;\n    this.heroSprite.canPush = heroCanPush;\n    this.heroSprite.haveSword = heroHaveSword;\n    this.heroSprite.haveApple = heroHaveApple;\n    this.heroSprite.haveAvocado = heroHaveAvocado;\n    this.heroSprite.haveBanana = heroHaveBanana;\n    this.heroSprite.haveCherries = heroHaveCherries;\n    this.heroSprite.haveOrange = heroHaveOrange;\n    this.heroSprite.havePineapple = heroHavePineapple;\n    this.heroSprite.haveWatermelon = heroHaveWatermelon;\n    this.updateHeroHealthUi(this.calculateHeroHealthStates());\n    this.updateHeroCoinUi(heroCoin);\n\n    this.heroSprite.restoreHealth = (restore) => {\n      this.heroSprite.health = Math.min(\n        this.heroSprite.health + restore,\n        this.heroSprite.maxHealth\n      );\n      this.updateHeroHealthUi(this.calculateHeroHealthStates());\n    };\n\n    this.heroSprite.increaseMaxHealth = (increase) => {\n      this.heroSprite.maxHealth += increase;\n      this.updateHeroHealthUi(this.calculateHeroHealthStates());\n    };\n\n    this.heroSprite.collectCoin = (coinQuantity) => {\n      this.heroSprite.coin = Math.min(this.heroSprite.coin + coinQuantity, 999);\n      this.updateHeroCoinUi(this.heroSprite.coin);\n    };\n\n    this.heroSprite.takeDamage = (damage) => {\n      this.time.delayedCall(180, () => {\n        this.heroSprite.health -= damage;\n        if (this.heroSprite.health <= 0) {\n          camera.fadeOut(SCENE_FADE_TIME);\n          this.updateHeroHealthUi([]);\n          this.updateHeroCoinUi(null);\n          this.time.delayedCall(SCENE_FADE_TIME, () => {\n            this.isTeleporting = false;\n            this.scene.start(\"GameOverScene\");\n          });\n        } else {\n          this.updateHeroHealthUi(this.calculateHeroHealthStates());\n          this.tweens.add({\n            targets: this.heroSprite,\n            alpha: 0,\n            ease: PhaserMath.Easing.Elastic.InOut,\n            duration: 70,\n            repeat: 1,\n            yoyo: true,\n          });\n        }\n      });\n    };\n    this.heroSprite.body.setSize(14, 14);\n    this.heroSprite.body.setOffset(9, 13);\n    this.heroActionCollider = createInteractiveGameObject(\n      this,\n      this.heroSprite.x + 9,\n      this.heroSprite.y + 36,\n      14,\n      8,\n      \"attack\",\n      isDebugMode\n    );\n    this.heroPresenceCollider = createInteractiveGameObject(\n      this,\n      this.heroSprite.x + 16,\n      this.heroSprite.y + 20,\n      320, // TODO\n      320, // TODO\n      \"presence\",\n      isDebugMode,\n      { x: 0.5, y: 0.5 }\n    );\n    this.heroObjectCollider = createInteractiveGameObject(\n      this,\n      this.heroSprite.x + 16,\n      this.heroSprite.y + 20,\n      24,\n      24,\n      \"object\",\n      isDebugMode,\n      { x: 0.5, y: 0.5 }\n    );\n\n    // Items\n    this.itemsSprites = this.add.group();\n    if (!this.anims.exists(\"heart_idle\")) {\n      this.anims.create({\n        key: \"heart_idle\",\n        frames: this.getFramesForAnimation(\"heart\", \"idle\"),\n        frameRate: 4,\n        repeat: -1,\n        yoyo: false,\n      });\n    }\n\n    if (!this.anims.exists(\"coin_idle\")) {\n      this.anims.create({\n        key: \"coin_idle\",\n        frames: this.getFramesForAnimation(\"coin\", \"idle\"),\n        frameRate: 4,\n        repeat: -1,\n        yoyo: false,\n      });\n    }\n\n    const enemiesData = [];\n    const elementsLayers = this.add.group();\n    for (let i = 0; i < map.layers.length; i++) {\n      const layer = map.createLayer(i, \"tileset\", 0, 0);\n      layer.layer.properties.forEach((property) => {\n        const { value, name } = property;\n\n        if (name === \"type\" && value === \"elements\") {\n          elementsLayers.add(layer);\n        }\n      });\n\n      this.physics.add.collider(this.heroSprite, layer);\n    }\n\n    const npcsKeys = [];\n    const dataLayer = map.getObjectLayer(\"actions\");\n    dataLayer.objects.forEach((data) => {\n      const { properties, x, y } = data;\n\n      properties.forEach((property) => {\n        const { name, type, value } = property;\n        switch (name) {\n          case \"dialog\": {\n            const customCollider = createInteractiveGameObject(\n              this,\n              x,\n              y,\n              16,\n              16,\n              \"dialog\",\n              isDebugMode\n            );\n\n            this.physics.add.overlap(\n              this.heroActionCollider,\n              customCollider,\n              (objA, objB) => {\n                if (this.isShowingDialog) {\n                  return;\n                }\n\n                if (Input.Keyboard.JustDown(this.enterKey)) {\n                  const characterName = value;\n                  const customEvent = new CustomEvent(\"new-dialog\", {\n                    detail: {\n                      characterName,\n                    },\n                  });\n\n                  window.dispatchEvent(customEvent);\n                  const dialogBoxFinishedEventListener = () => {\n                    window.removeEventListener(\n                      `${characterName}-dialog-finished`,\n                      dialogBoxFinishedEventListener\n                    );\n\n                    // just to consume the JustDown\n                    Input.Keyboard.JustDown(this.enterKey);\n                    Input.Keyboard.JustDown(this.spaceKey);\n\n                    this.time.delayedCall(100, () => {\n                      this.isShowingDialog = false;\n                    });\n                  };\n                  window.addEventListener(\n                    `${characterName}-dialog-finished`,\n                    dialogBoxFinishedEventListener\n                  );\n\n                  this.isShowingDialog = true;\n                }\n              }\n            );\n\n            break;\n          }\n\n          //   case \"npcData\": {\n          //     const { facingDirection, movementType, npcKey, delay, area } =\n          //       this.extractNpcDataFromTiled(value);\n\n          //     npcsKeys.push({\n          //       facingDirection,\n          //       movementType,\n          //       npcKey,\n          //       delay,\n          //       area,\n          //       x,\n          //       y,\n          //     });\n          //     break;\n          //   }\n\n          case \"itemData\": {\n            const [itemType] = value.split(\":\");\n\n            switch (itemType) {\n              case \"coin\": {\n                const item = this.physics.add\n                  .sprite(x, y, \"coin\")\n                  .setDepth(1)\n                  .setOrigin(0, 1);\n\n                item.itemType = \"coin\";\n                this.itemsSprites.add(item);\n                item.anims.play(\"coin_idle\");\n                break;\n              }\n\n              case \"heart_container\": {\n                const item = this.physics.add\n                  .sprite(x, y, \"heart_container\")\n                  .setDepth(1)\n                  .setOrigin(0, 1);\n\n                item.itemType = \"heart_container\";\n                this.itemsSprites.add(item);\n                break;\n              }\n\n              case \"heart\": {\n                const item = this.physics.add\n                  .sprite(x, y, \"heart\")\n                  .setDepth(1)\n                  .setOrigin(0, 1);\n\n                item.itemType = \"heart\";\n                this.itemsSprites.add(item);\n                item.anims.play(\"heart_idle\");\n                break;\n              }\n\n              case \"sword\": {\n                if (!heroHaveSword) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"sword\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"sword\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n              case \"apple\": {\n                if (!heroHaveApple) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"apple\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"apple\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n              case \"avocado\": {\n                if (!heroHaveAvocado) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"avocado\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"avocado\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n\n              case \"banana\": {\n                if (!heroHaveBanana) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"banana\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"banana\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n\n              case \"cherries\": {\n                if (!heroHaveCherries) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"cherries\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"cherries\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n              case \"orange\": {\n                if (!heroHaveOrange) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"orange\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"orange\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n              case \"pineapple\": {\n                if (!heroHavePineapple) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"pineapple\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"pineapple\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n              case \"watermelon\": {\n                if (!heroHaveWatermelon) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"watermelon\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"watermelon\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n\n              case \"push\": {\n                if (!heroCanPush) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"push\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"push\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n\n              default: {\n                break;\n              }\n            }\n\n            break;\n          }\n\n          case \"enemyData\": {\n            const [enemyType, enemyAI, speed, health] = value.split(\":\");\n            enemiesData.push({\n              x,\n              y,\n              speed: Number.parseInt(speed, 10),\n              enemyType,\n              enemySpecies: this.getEnemySpecies(enemyType),\n              enemyAI,\n              enemyName: `${enemyType}_${enemiesData.length}`,\n              health: Number.parseInt(health, 10),\n            });\n            break;\n          }\n\n          case \"teleportTo\": {\n            const customCollider = createInteractiveGameObject(\n              this,\n              x,\n              y,\n              16,\n              16,\n              \"teleport\",\n              isDebugMode\n            );\n\n            const {\n              mapKey: teleportToMapKey,\n              x: teleportToX,\n              y: teleportToY,\n            } = this.extractTeleportDataFromTiled(value);\n\n            const overlapCollider = this.physics.add.overlap(\n              this.heroSprite,\n              customCollider,\n              () => {\n                // camera.stopFollow();\n                this.physics.world.removeCollider(overlapCollider);\n                const facingDirection =\n                  this.gridEngine.getFacingDirection(\"hero\");\n                camera.fadeOut(SCENE_FADE_TIME);\n                // this.scene.pause();\n                this.isTeleporting = true;\n                // this.gridEngine.stopMovement('hero');\n\n                this.time.delayedCall(SCENE_FADE_TIME, () => {\n                  this.isTeleporting = false;\n                  this.scene.restart({\n                    heroStatus: {\n                      position: { x: teleportToX, y: teleportToY },\n                      previousPosition:\n                        this.calculatePreviousTeleportPosition(),\n                      frame: `hero_idle_${facingDirection}_01`,\n                      facingDirection,\n                      health: this.heroSprite.health,\n                      maxHealth: this.heroSprite.maxHealth,\n                      coin: this.heroSprite.coin,\n                      canPush: this.heroSprite.canPush,\n                      haveSword: this.heroSprite.haveSword,\n                      haveApple: this.heroSprite.haveApple,\n                      haveAvocado: this.heroSprite.haveAvocado,\n                      haveBanana: this.heroSprite.haveBanana,\n                      haveCherries: this.heroSprite.haveCherries,\n                      haveOrange: this.heroSprite.haveOrange,\n                      havePineapple: this.heroSprite.havePineapple,\n                      haveWatermelon: this.heroSprite.haveWatermelon,\n                    },\n                    mapKey: teleportToMapKey,\n                  });\n                });\n              }\n            );\n\n            break;\n          }\n\n          default: {\n            break;\n          }\n        }\n      });\n    });\n\n    camera.startFollow(this.heroSprite, true);\n    camera.setFollowOffset(-this.heroSprite.width, -this.heroSprite.height);\n    camera.setBounds(\n      0,\n      0,\n      Math.max(map.widthInPixels, game.scale.gameSize.width),\n      Math.max(map.heightInPixels, game.scale.gameSize.height)\n    );\n\n    if (map.widthInPixels < game.scale.gameSize.width) {\n      camera.setPosition((game.scale.gameSize.width - map.widthInPixels) / 2);\n    }\n\n    if (map.heightInPixels < game.scale.gameSize.height) {\n      camera.setPosition(\n        camera.x,\n        (game.scale.gameSize.height - map.heightInPixels) / 2\n      );\n    }\n\n    const gridEngineConfig = {\n      characters: [\n        {\n          id: \"hero\",\n          sprite: this.heroSprite,\n          startPosition: initialPosition,\n          offsetY: 4,\n        },\n      ],\n    };\n\n    this.physics.add.overlap(\n      this.heroSprite,\n      this.itemsSprites,\n      (objA, objB) => {\n        const question = localStorage.getItem(\"question\");\n        const item = [objA, objB].find((obj) => obj !== this.heroSprite);\n\n        if (item.itemType === \"heart\") {\n          this.heroSprite.restoreHealth(20);\n          item.setVisible(false);\n          item.destroy();\n        }\n\n        if (item.itemType === \"coin\") {\n          this.heroSprite.collectCoin(1);\n          item.setVisible(false);\n          item.destroy();\n        }\n\n        if (item.itemType === \"heart_container\") {\n          this.heroSprite.increaseMaxHealth(20);\n          item.setVisible(false);\n          item.destroy();\n        }\n\n        if (item.itemType === \"sword\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          this.isShowingDialog = true;\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.haveSword = true;\n          item.setVisible(false);\n          item.destroy();\n        }\n        if (item.itemType === \"apple\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n          this.heroSprite.haveApple = true;\n          if (item.itemType === question) {\n            item.setVisible(false);\n            item.destroy();\n            this.isShowingDialog = true;\n          }\n        }\n        if (item.itemType === \"avocado\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.haveAvocado = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n        if (item.itemType === \"banana\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.haveBanana = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n\n        if (item.itemType === \"cherries\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.haveCherries = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n\n        if (item.itemType === \"orange\") {\n          console.log(\"123\");\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.haveOrange = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n\n        if (item.itemType === \"pineapple\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.havePineapple = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n\n        if (item.itemType === \"watermelon\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.haveWatermelon = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n\n        if (item.itemType === \"push\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.canPush = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n      }\n    );\n\n    this.enemiesSprites = this.add.group();\n    enemiesData.forEach((enemyData, index) => {\n      const {\n        enemySpecies,\n        enemyType,\n        x,\n        y,\n        enemyName,\n        speed,\n        enemyAI,\n        health,\n      } = enemyData;\n      const enemy = this.physics.add.sprite(\n        0,\n        0,\n        enemyType,\n        `${enemySpecies}_idle_01`\n      );\n      enemy.setTint(this.getEnemyColor(enemyType));\n      enemy.name = enemyName;\n      enemy.enemyType = enemyType;\n      enemy.enemySpecies = enemySpecies;\n      enemy.enemyAI = enemyAI;\n      enemy.speed = speed;\n      enemy.health = health;\n      enemy.isAttacking = false;\n      enemy.updateFollowHeroPosition = true;\n      enemy.lastKnowHeroPosition = { x: 0, y: 0 };\n      enemy.body.setSize(14, 14);\n      enemy.body.setOffset(9, 21);\n      this.enemiesSprites.add(enemy);\n      enemy.takeDamage = (damage, isSpaceJustDown) => {\n        if (isSpaceJustDown) {\n          enemy.health -= damage;\n\n          if (enemy.health < 0) {\n            enemy.setVisible(false);\n            const position = this.gridEngine.getPosition(enemy.name);\n            this.spawnItem({\n              x: position.x * 16,\n              y: position.y * 16,\n            });\n            this.gridEngine.setPosition(enemy.name, { x: 1, y: 1 });\n            enemy.destroy();\n          } else {\n            this.tweens.add({\n              targets: enemy,\n              alpha: 0,\n              ease: PhaserMath.Easing.Elastic.InOut,\n              duration: 70,\n              repeat: 1,\n              yoyo: true,\n            });\n          }\n        }\n      };\n\n      if (!this.anims.exists(`${enemySpecies}_idle`)) {\n        this.anims.create({\n          key: `${enemySpecies}_idle`,\n          frames: this.getFramesForAnimation(enemySpecies, \"idle\"),\n          frameRate: 8,\n          repeat: -1,\n          yoyo: false,\n        });\n      }\n\n      if (!this.anims.exists(`${enemySpecies}_attack`)) {\n        this.anims.create({\n          key: `${enemySpecies}_attack`,\n          frames: this.getFramesForAnimation(enemySpecies, \"attack\"),\n          frameRate: 12,\n          repeat: 0,\n          yoyo: false,\n        });\n      }\n\n      if (!this.anims.exists(`${enemySpecies}_walking`)) {\n        this.anims.create({\n          key: `${enemySpecies}_walking`,\n          frames: this.getFramesForAnimation(enemySpecies, \"walking\"),\n          frameRate: 8,\n          repeat: -1,\n          yoyo: false,\n        });\n      }\n\n      if (!this.anims.exists(`${enemySpecies}_die`)) {\n        this.anims.create({\n          key: `${enemySpecies}_die`,\n          frames: this.getFramesForAnimation(enemySpecies, \"die\"),\n          frameRate: 8,\n          repeat: 0,\n          yoyo: false,\n        });\n      }\n\n      enemy.anims.play(`${enemySpecies}_idle`);\n      enemy.on(\"animationcomplete\", (animation) => {\n        if (animation.key.includes(\"attack\")) {\n          enemy.anims.play(`${enemySpecies}_idle`);\n        }\n      });\n\n      gridEngineConfig.characters.push({\n        id: enemyName,\n        sprite: enemy,\n        startPosition: { x: x / 16, y: y / 16 - 1 },\n        speed,\n        offsetY: -4,\n      });\n    });\n\n    const npcSprites = this.add.group();\n    npcsKeys.forEach((npcData) => {\n      const { npcKey, x, y, facingDirection = \"down\" } = npcData;\n      const npc = this.physics.add.sprite(\n        0,\n        0,\n        npcKey,\n        `${npcKey}_idle_${facingDirection}_01`\n      );\n      npc.body.setSize(14, 14);\n      npc.body.setOffset(9, 13);\n      npcSprites.add(npc);\n\n      this.createPlayerWalkingAnimation(npcKey, \"walking_up\");\n      this.createPlayerWalkingAnimation(npcKey, \"walking_right\");\n      this.createPlayerWalkingAnimation(npcKey, \"walking_down\");\n      this.createPlayerWalkingAnimation(npcKey, \"walking_left\");\n\n      gridEngineConfig.characters.push({\n        id: npcKey,\n        sprite: npc,\n        startPosition: { x: x / 16, y: y / 16 - 1 },\n        speed: 1,\n        offsetY: 4,\n      });\n    });\n\n    // Movement\n    this.createPlayerWalkingAnimation(\"hero\", \"walking_up\");\n    this.createPlayerWalkingAnimation(\"hero\", \"walking_right\");\n    this.createPlayerWalkingAnimation(\"hero\", \"walking_down\");\n    this.createPlayerWalkingAnimation(\"hero\", \"walking_left\");\n\n    // Attack\n    this.createPlayerAttackAnimation(\"hero\", \"attack_up\", 12, 0, false);\n    this.createPlayerAttackAnimation(\"hero\", \"attack_right\", 12, 0, false);\n    this.createPlayerAttackAnimation(\"hero\", \"attack_down\", 12, 0, false);\n    this.createPlayerAttackAnimation(\"hero\", \"attack_left\", 12, 0, false);\n\n    this.heroSprite.on(\"animationcomplete\", (animation, animationFrame) => {\n      if (animation.key.includes(\"attack\")) {\n        this.isAttacking = false;\n      }\n    });\n\n    this.heroSprite.on(\"animationstop\", (animation, animationFrame) => {\n      if (animation.key.includes(\"attack\")) {\n        this.isAttacking = false;\n      }\n    });\n\n    this.gridEngine.create(map, gridEngineConfig);\n\n    // NPCs\n    npcsKeys.forEach((npcData) => {\n      const { movementType, npcKey, delay, area } = npcData;\n\n      if (movementType === NPC_MOVEMENT_RANDOM) {\n        this.gridEngine.moveRandomly(npcKey, delay, area);\n      }\n    });\n\n    // enemies\n    enemiesData.forEach((enemyData) => {\n      const { enemyAI, enemyName, speed } = enemyData;\n\n      this.gridEngine.moveRandomly(enemyName, 1000, 4);\n    });\n    this.physics.add.overlap(\n      this.heroObjectCollider,\n      this.enemiesSprites,\n      (objA, objB) => {\n        const enemy = [objA, objB].find(\n          (obj) => obj !== this.heroObjectCollider\n        );\n        if (enemy.isAttacking || this.gridEngine.isMoving(enemy.name)) {\n          return;\n        }\n\n        enemy.anims.play(`${enemy.enemySpecies}_attack`);\n        this.heroSprite.takeDamage(10);\n        enemy.isAttacking = true;\n        this.time.delayedCall(this.getEnemyAttackSpeed(enemy.enemyType), () => {\n          enemy.isAttacking = false;\n        });\n      }\n    );\n\n    this.physics.add.overlap(\n      this.heroPresenceCollider,\n      this.enemiesSprites,\n      (objA, objB) => {\n        const enemy = [objA, objB].find(\n          (obj) => obj !== this.heroPresenceCollider\n        );\n\n        if (enemy.canSeeHero && enemy.enemyAI === ENEMY_AI_TYPE) {\n          enemy.isFollowingHero = true;\n          if (enemy.updateFollowHeroPosition) {\n            const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n            const heroPosition = this.gridEngine.getPosition(\"hero\");\n            const heroBackPosition = this.getBackPosition(\n              facingDirection,\n              heroPosition\n            );\n\n            if (\n              enemy.lastKnowHeroPosition.x !== heroBackPosition.x ||\n              enemy.lastKnowHeroPosition.y !== heroBackPosition.y\n            ) {\n              const enemyPosition = this.gridEngine.getPosition(enemy.name);\n              enemy.lastKnowHeroPosition = heroBackPosition;\n\n              if (\n                heroBackPosition.x === enemyPosition.x &&\n                heroBackPosition.y === enemyPosition.y\n              ) {\n                enemy.updateFollowHeroPosition = false;\n                // TODO can attack I guess\n                return;\n              }\n\n              enemy.updateFollowHeroPosition = false;\n              this.time.delayedCall(1000, () => {\n                enemy.updateFollowHeroPosition = true;\n              });\n\n              this.gridEngine.setSpeed(\n                enemy.name,\n                Math.ceil(enemy.speed * 1.5)\n              );\n              this.gridEngine.moveTo(enemy.name, heroBackPosition, {\n                NoPathFoundStrategy: \"CLOSEST_REACHABLE\",\n              });\n            }\n          }\n        }\n\n        enemy.canSeeHero = enemy.body.embedded;\n      }\n    );\n\n    // Animations\n    this.gridEngine.movementStarted().subscribe(({ charId, direction }) => {\n      if (charId === \"hero\") {\n        this.heroSprite.anims.play(`hero_walking_${direction}`);\n      } else {\n        const npc = npcSprites\n          .getChildren()\n          .find((npcSprite) => npcSprite.texture.key === charId);\n        if (npc) {\n          npc.anims.play(`${charId}_walking_${direction}`);\n          return;\n        }\n\n        const enemy = this.enemiesSprites\n          .getChildren()\n          .find((enemySprite) => enemySprite.name === charId);\n        if (enemy) {\n          enemy.anims.play(`${enemy.enemySpecies}_walking`);\n        }\n      }\n    });\n\n    this.gridEngine.movementStopped().subscribe(({ charId, direction }) => {\n      if (charId === \"hero\") {\n        this.heroSprite.anims.stop();\n        this.heroSprite.setFrame(this.getStopFrame(direction, charId));\n      } else {\n        const npc = npcSprites\n          .getChildren()\n          .find((npcSprite) => npcSprite.texture.key === charId);\n        if (npc) {\n          npc.anims.stop();\n          npc.setFrame(this.getStopFrame(direction, charId));\n          return;\n        }\n\n        const enemy = this.enemiesSprites\n          .getChildren()\n          .find((enemySprite) => enemySprite.name === charId);\n        if (enemy) {\n          enemy.anims.play(`${enemy.enemySpecies}_idle`, true);\n        }\n      }\n    });\n\n    this.gridEngine.directionChanged().subscribe(({ charId, direction }) => {\n      if (charId === \"hero\") {\n        this.heroSprite.setFrame(this.getStopFrame(direction, charId));\n      } else {\n        const npc = npcSprites\n          .getChildren()\n          .find((npcSprite) => npcSprite.texture.key === charId);\n        if (npc) {\n          npc.setFrame(this.getStopFrame(direction, charId));\n          return;\n        }\n\n        const enemy = this.enemiesSprites\n          .getChildren()\n          .find((enemySprite) => enemySprite.name === charId);\n        if (enemy) {\n          enemy.anims.play(`${enemy.enemySpecies}_idle`);\n        }\n      }\n    });\n\n    this.heroActionCollider.update = () => {\n      const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n      this.heroPresenceCollider.setPosition(\n        this.heroSprite.x + 16,\n        this.heroSprite.y + 20\n      );\n\n      this.heroObjectCollider.setPosition(\n        this.heroSprite.x + 16,\n        this.heroSprite.y + 20\n      );\n\n      switch (facingDirection) {\n        case \"down\": {\n          this.heroActionCollider.setSize(14, 8);\n          this.heroActionCollider.body.setSize(14, 8);\n          this.heroActionCollider.setX(this.heroSprite.x + 9);\n          this.heroActionCollider.setY(this.heroSprite.y + 36);\n\n          break;\n        }\n\n        case \"up\": {\n          this.heroActionCollider.setSize(14, 8);\n          this.heroActionCollider.body.setSize(14, 8);\n          this.heroActionCollider.setX(this.heroSprite.x + 9);\n          this.heroActionCollider.setY(this.heroSprite.y + 12);\n\n          break;\n        }\n\n        case \"left\": {\n          this.heroActionCollider.setSize(8, 14);\n          this.heroActionCollider.body.setSize(8, 14);\n          this.heroActionCollider.setX(this.heroSprite.x);\n          this.heroActionCollider.setY(this.heroSprite.y + 21);\n\n          break;\n        }\n\n        case \"right\": {\n          this.heroActionCollider.setSize(8, 14);\n          this.heroActionCollider.body.setSize(8, 14);\n          this.heroActionCollider.setX(this.heroSprite.x + 24);\n          this.heroActionCollider.setY(this.heroSprite.y + 21);\n\n          break;\n        }\n\n        default: {\n          break;\n        }\n      }\n    };\n\n    this.physics.add.overlap(\n      this.heroActionCollider,\n      npcSprites,\n      (objA, objB) => {\n        if (this.isShowingDialog) {\n          return;\n        }\n\n        const npc = [objA, objB].find((obj) => obj !== this.heroActionCollider);\n\n        if (Input.Keyboard.JustDown(this.enterKey)) {\n          if (this.gridEngine.isMoving(npc.texture.key)) {\n            return;\n          }\n\n          const characterName = npc.texture.key;\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName,\n            },\n          });\n\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${characterName}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n            this.gridEngine.moveRandomly(characterName);\n\n            // just to consume the JustDown\n            Input.Keyboard.JustDown(this.enterKey);\n            Input.Keyboard.JustDown(this.spaceKey);\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n              const { delay, area } = npcsKeys.find(\n                (npcData) => npcData.npcKey === characterName\n              );\n              this.gridEngine.moveRandomly(characterName, delay, area);\n            });\n          };\n          window.addEventListener(\n            `${characterName}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.isShowingDialog = true;\n          const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n          this.gridEngine.stopMovement(characterName);\n          npc.setFrame(\n            this.getStopFrame(\n              this.getOppositeDirection(facingDirection),\n              characterName\n            )\n          );\n        }\n      }\n    );\n\n    this.physics.add.overlap(\n      this.heroActionCollider,\n      elementsLayers,\n      (objA, objB) => {\n        const tile = [objA, objB].find(\n          (obj) => obj !== this.heroActionCollider\n        );\n\n        // Handles attack\n        if (tile?.index > 0 && !tile.wasHandled) {\n          switch (tile.index) {\n            case BUSH_INDEX: {\n              if (this.isAttacking) {\n                tile.wasHandled = true;\n\n                this.time.delayedCall(ATTACK_DELAY_TIME, () => {\n                  tile.setVisible(false);\n                  this.spawnItem({\n                    x: tile.pixelX,\n                    y: tile.pixelY,\n                  });\n                  tile.destroy();\n                });\n              }\n\n              break;\n            }\n\n            case BOX_INDEX: {\n              if (this.heroSprite.canPush && this.isAttacking) {\n                const newPosition = this.calculatePushTilePosition();\n                const canBePushed = map.layers.every((layer) => {\n                  const t = layer.tilemapLayer.getTileAtWorldXY(\n                    newPosition.x,\n                    newPosition.y\n                  );\n\n                  return !t?.properties?.ge_collide;\n                });\n\n                if (canBePushed && !tile.isMoved) {\n                  tile.isMoved = true;\n                  this.tweens.add({\n                    targets: tile,\n                    pixelX: newPosition.x,\n                    pixelY: newPosition.y,\n                    ease: \"Power2\", // PhaserMath.Easing\n                    duration: 700,\n                    onComplete: () => {\n                      tile.setVisible(false);\n                      const newTile = tile.layer.tilemapLayer.putTileAt(\n                        BOX_INDEX,\n                        newPosition.x / 16,\n                        newPosition.y / 16,\n                        true\n                      );\n\n                      newTile.properties = {\n                        ...tile.properties,\n                      };\n                      newTile.isMoved = true;\n                      tile.destroy();\n                    },\n                  });\n                }\n              }\n\n              break;\n            }\n\n            default: {\n              break;\n            }\n          }\n        }\n      }\n    );\n\n    this.physics.add.overlap(\n      this.heroActionCollider,\n      this.enemiesSprites,\n      (objA, objB) => {\n        const enemy = [objA, objB].find(\n          (obj) => obj !== this.heroActionCollider\n        );\n\n        // Handles attack\n        if (this.isAttacking) {\n          const isSpaceJustDown = this.isSpaceJustDown;\n          this.time.delayedCall(ATTACK_DELAY_TIME, () => {\n            enemy.takeDamage(25, isSpaceJustDown);\n          });\n        }\n      }\n    );\n  }\n\n  update() {\n    this.isSpaceJustDown = Input.Keyboard.JustDown(this.spaceKey);\n\n    if (this.isTeleporting || this.isAttacking || this.isShowingDialog) {\n      return;\n    }\n\n    if (\n      !this.gridEngine.isMoving(\"hero\") &&\n      this.isSpaceJustDown &&\n      this.heroSprite.haveApple &&\n      this.heroSprite.haveAvocado &&\n      this.heroSprite.haveBanana &&\n      this.heroSprite.haveCherries &&\n      this.heroSprite.haveOrange &&\n      this.heroSprite.havePineapple &&\n      this.heroSprite.haveWatermelon\n    ) {\n      const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n      this.heroSprite.anims.play(`hero_attack_${facingDirection}`);\n      this.isAttacking = true;\n      return;\n    }\n\n    this.enemiesSprites.getChildren().forEach((enemy) => {\n      enemy.canSeeHero = enemy.body.embedded;\n      if (!enemy.canSeeHero && enemy.isFollowingHero) {\n        enemy.isFollowingHero = false;\n        this.gridEngine.setSpeed(enemy.name, enemy.speed);\n        this.gridEngine.moveRandomly(enemy.name, 1000, 4);\n      }\n    });\n\n    this.heroActionCollider.update();\n    if (this.cursors.left.isDown) {\n      this.gridEngine.move(\"hero\", \"left\");\n    } else if (this.cursors.right.isDown) {\n      this.gridEngine.move(\"hero\", \"right\");\n    } else if (this.cursors.up.isDown) {\n      this.gridEngine.move(\"hero\", \"up\");\n    } else if (this.cursors.down.isDown) {\n      this.gridEngine.move(\"hero\", \"down\");\n    }\n  }\n}\n","/var/www/html/chat-app/game/src/game/Message.js",[],"/var/www/html/chat-app/game/src/game/constants.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":1,"column":34,"nodeType":"106","messageId":"107","endLine":1,"endColumn":41},{"ruleId":"104","severity":1,"message":"108","line":11,"column":8,"nodeType":"106","messageId":"107","endLine":11,"endColumn":18},{"ruleId":"104","severity":1,"message":"109","line":12,"column":10,"nodeType":"106","messageId":"107","endLine":12,"endColumn":18},{"ruleId":"104","severity":1,"message":"110","line":12,"column":20,"nodeType":"106","messageId":"107","endLine":12,"endColumn":24},{"ruleId":"104","severity":1,"message":"111","line":12,"column":26,"nodeType":"106","messageId":"107","endLine":12,"endColumn":31},{"ruleId":"104","severity":1,"message":"112","line":12,"column":33,"nodeType":"106","messageId":"107","endLine":12,"endColumn":41},{"ruleId":"104","severity":1,"message":"113","line":12,"column":43,"nodeType":"106","messageId":"107","endLine":12,"endColumn":53},{"ruleId":"114","severity":1,"message":"115","line":235,"column":19,"nodeType":"116","messageId":"117","endLine":235,"endColumn":21},{"ruleId":"104","severity":1,"message":"118","line":321,"column":9,"nodeType":"106","messageId":"107","endLine":321,"endColumn":19},{"ruleId":"104","severity":1,"message":"119","line":330,"column":9,"nodeType":"106","messageId":"107","endLine":330,"endColumn":21},{"ruleId":"104","severity":1,"message":"120","line":334,"column":9,"nodeType":"106","messageId":"107","endLine":334,"endColumn":21},{"ruleId":"114","severity":1,"message":"115","line":335,"column":19,"nodeType":"116","messageId":"117","endLine":335,"endColumn":21},{"ruleId":"114","severity":1,"message":"115","line":335,"column":39,"nodeType":"116","messageId":"117","endLine":335,"endColumn":41},{"ruleId":"114","severity":1,"message":"115","line":396,"column":30,"nodeType":"116","messageId":"117","endLine":396,"endColumn":32},{"ruleId":"121","severity":1,"message":"122","line":437,"column":6,"nodeType":"123","endLine":437,"endColumn":37,"suggestions":"124"},{"ruleId":"114","severity":1,"message":"115","line":441,"column":29,"nodeType":"116","messageId":"117","endLine":441,"endColumn":31},{"ruleId":"125","severity":1,"message":"126","line":444,"column":13,"nodeType":"127","endLine":444,"endColumn":33},{"ruleId":"125","severity":1,"message":"126","line":483,"column":13,"nodeType":"127","endLine":483,"endColumn":33},{"ruleId":"121","severity":1,"message":"128","line":116,"column":6,"nodeType":"123","endLine":116,"endColumn":61,"suggestions":"129"},{"ruleId":"121","severity":1,"message":"130","line":139,"column":6,"nodeType":"123","endLine":139,"endColumn":8,"suggestions":"131"},{"ruleId":"104","severity":1,"message":"132","line":18,"column":8,"nodeType":"106","messageId":"107","endLine":18,"endColumn":17},{"ruleId":"104","severity":1,"message":"133","line":19,"column":8,"nodeType":"106","messageId":"107","endLine":19,"endColumn":17},{"ruleId":"104","severity":1,"message":"134","line":20,"column":8,"nodeType":"106","messageId":"107","endLine":20,"endColumn":17},{"ruleId":"104","severity":1,"message":"135","line":21,"column":8,"nodeType":"106","messageId":"107","endLine":21,"endColumn":17},{"ruleId":"104","severity":1,"message":"136","line":44,"column":8,"nodeType":"106","messageId":"107","endLine":44,"endColumn":18},{"ruleId":"104","severity":1,"message":"137","line":45,"column":8,"nodeType":"106","messageId":"107","endLine":45,"endColumn":18},{"ruleId":"104","severity":1,"message":"138","line":46,"column":8,"nodeType":"106","messageId":"107","endLine":46,"endColumn":18},{"ruleId":"104","severity":1,"message":"139","line":47,"column":8,"nodeType":"106","messageId":"107","endLine":47,"endColumn":18},{"ruleId":"104","severity":1,"message":"140","line":16,"column":15,"nodeType":"106","messageId":"107","endLine":16,"endColumn":27},{"ruleId":"104","severity":1,"message":"141","line":355,"column":24,"nodeType":"106","messageId":"107","endLine":355,"endColumn":46},{"ruleId":"104","severity":1,"message":"142","line":356,"column":7,"nodeType":"106","messageId":"107","endLine":356,"endColumn":23},{"ruleId":"104","severity":1,"message":"143","line":528,"column":23,"nodeType":"106","messageId":"107","endLine":528,"endColumn":27},{"ruleId":"104","severity":1,"message":"144","line":1351,"column":15,"nodeType":"106","messageId":"107","endLine":1351,"endColumn":22},{"ruleId":"104","severity":1,"message":"145","line":1351,"column":35,"nodeType":"106","messageId":"107","endLine":1351,"endColumn":40},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'classNames' is defined but never used.","'Backdrop' is defined but never used.","'Fade' is defined but never used.","'Modal' is defined but never used.","'StepIcon' is defined but never used.","'Typography' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'renderMess' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'onEnterPress' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'questionIndex'. Either include it or remove the dependency array.","ArrayExpression",["148"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useCallback has missing dependencies: 'characterName', 'question', and 'setQuestionIndex'. Either include them or remove the dependency array. If 'setQuestionIndex' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["149"],"React Hook useEffect has missing dependencies: 'characterName', 'heroHealthStates', 'question', 'setHeroCoins', and 'setHeroHealthStates'. Either include them or remove the dependency array. If 'setHeroHealthStates' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["150"],"'npc01Json' is defined but never used.","'npc02Json' is defined but never used.","'npc03Json' is defined but never used.","'npc04Json' is defined but never used.","'npc01Image' is defined but never used.","'npc02Image' is defined but never used.","'npc03Image' is defined but never used.","'npc04Image' is defined but never used.","'gameOverText' is assigned a value but never used.","'initialFacingDirection' is assigned a value but never used.","'previousPosition' is assigned a value but never used.","'type' is assigned a value but never used.","'enemyAI' is assigned a value but never used.","'speed' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},"Update the dependencies array to be: [questionIndex, setCharacterName, setMessages]",{"range":"157","text":"158"},"Update the dependencies array to be: [characterName, currentMessage, messageEnded, messages.length, onDone, question, setQuestionIndex]",{"range":"159","text":"160"},"Update the dependencies array to be: [characterName, heroHealthStates, question, setHeroCoins, setHeroHealthStates]",{"range":"161","text":"162"},[10919,10950],"[questionIndex, setCharacterName, setMessages]",[3345,3400],"[characterName, currentMessage, messageEnded, messages.length, onDone, question, setQuestionIndex]",[4003,4005],"[characterName, heroHealthStates, question, setHeroCoins, setHeroHealthStates]"]