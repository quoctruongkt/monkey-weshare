{"ast":null,"code":"var _jsxFileName = \"/var/www/html/chat-app/game/src/game/Message.js\",\n    _s = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nimport { animated, useTransition } from \"react-spring\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  dialogMessage: _ref => {\n    let {\n      multiplier\n    } = _ref;\n    return {\n      fontFamily: '\"Press Start 2P\"',\n      fontSize: `${6 * multiplier}px`,\n      textTransform: \"uppercase\"\n    };\n  }\n}));\n\nconst Message = _ref2 => {\n  _s();\n\n  let {\n    message = [],\n    trail = 35,\n    multiplier = 1,\n    onMessageEnded = () => {},\n    forceShowFullMessage = false\n  } = _ref2;\n  const classes = useStyles({\n    multiplier\n  });\n  const items = useMemo(() => message.trim().split(\"\").map((letter, index) => ({\n    item: letter,\n    key: index\n  })), [message]);\n  const transitions = useTransition(items, {\n    trail,\n    from: {\n      display: \"none\"\n    },\n    enter: {\n      display: \"\"\n    },\n    onRest: (status, controller, item) => {\n      if (item.key === items.length - 1) {\n        onMessageEnded();\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.dialogMessage,\n    children: [forceShowFullMessage && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 32\n    }, this), !forceShowFullMessage && transitions((styles, _ref3) => {\n      let {\n        item,\n        key\n      } = _ref3;\n      return /*#__PURE__*/_jsxDEV(animated.span, {\n        style: styles,\n        children: item\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Message, \"MO7oD7Gsiqzm1/7g11A8iA0ZhrQ=\", false, function () {\n  return [useStyles, useTransition];\n});\n\n_c = Message;\nexport default Message;\n\nvar _c;\n\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"sources":["/var/www/html/chat-app/game/src/game/Message.js"],"names":["useMemo","animated","useTransition","makeStyles","useStyles","theme","dialogMessage","multiplier","fontFamily","fontSize","textTransform","Message","message","trail","onMessageEnded","forceShowFullMessage","classes","items","trim","split","map","letter","index","item","key","transitions","from","display","enter","onRest","status","controller","length","styles"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,cAAxC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,MAAMC,SAAS,GAAGD,UAAU,CAAEE,KAAD,KAAY;AACvCC,EAAAA,aAAa,EAAE;AAAA,QAAC;AAAEC,MAAAA;AAAF,KAAD;AAAA,WAAqB;AAClCC,MAAAA,UAAU,EAAE,kBADsB;AAElCC,MAAAA,QAAQ,EAAG,GAAE,IAAIF,UAAW,IAFM;AAGlCG,MAAAA,aAAa,EAAE;AAHmB,KAArB;AAAA;AADwB,CAAZ,CAAD,CAA5B;;AAQA,MAAMC,OAAO,GAAG,SAMV;AAAA;;AAAA,MANW;AACfC,IAAAA,OAAO,GAAG,EADK;AAEfC,IAAAA,KAAK,GAAG,EAFO;AAGfN,IAAAA,UAAU,GAAG,CAHE;AAIfO,IAAAA,cAAc,GAAG,MAAM,CAAE,CAJV;AAKfC,IAAAA,oBAAoB,GAAG;AALR,GAMX;AACJ,QAAMC,OAAO,GAAGZ,SAAS,CAAC;AAAEG,IAAAA;AAAF,GAAD,CAAzB;AACA,QAAMU,KAAK,GAAGjB,OAAO,CACnB,MACEY,OAAO,CACJM,IADH,GAEGC,KAFH,CAES,EAFT,EAGGC,GAHH,CAGO,CAACC,MAAD,EAASC,KAAT,MAAoB;AACvBC,IAAAA,IAAI,EAAEF,MADiB;AAEvBG,IAAAA,GAAG,EAAEF;AAFkB,GAApB,CAHP,CAFiB,EASnB,CAACV,OAAD,CATmB,CAArB;AAYA,QAAMa,WAAW,GAAGvB,aAAa,CAACe,KAAD,EAAQ;AACvCJ,IAAAA,KADuC;AAEvCa,IAAAA,IAAI,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAFiC;AAGvCC,IAAAA,KAAK,EAAE;AAAED,MAAAA,OAAO,EAAE;AAAX,KAHgC;AAIvCE,IAAAA,MAAM,EAAE,CAACC,MAAD,EAASC,UAAT,EAAqBR,IAArB,KAA8B;AACpC,UAAIA,IAAI,CAACC,GAAL,KAAaP,KAAK,CAACe,MAAN,GAAe,CAAhC,EAAmC;AACjClB,QAAAA,cAAc;AACf;AACF;AARsC,GAAR,CAAjC;AAWA,sBACE;AAAK,IAAA,SAAS,EAAEE,OAAO,CAACV,aAAxB;AAAA,eACGS,oBAAoB,iBAAI;AAAA,gBAAOH;AAAP;AAAA;AAAA;AAAA;AAAA,YAD3B,EAGG,CAACG,oBAAD,IACCU,WAAW,CAAC,CAACQ,MAAD;AAAA,UAAS;AAAEV,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAT;AAAA,0BACV,QAAC,QAAD,CAAU,IAAV;AAAyB,QAAA,KAAK,EAAES,MAAhC;AAAA,kBACGV;AADH,SAAoBC,GAApB;AAAA;AAAA;AAAA;AAAA,cADU;AAAA,KAAD,CAJf;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA3CD;;GAAMb,O;UAOYP,S,EAaIF,a;;;KApBhBS,O;AA6CN,eAAeA,OAAf","sourcesContent":["import { useMemo } from \"react\";\nimport { animated, useTransition } from \"react-spring\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  dialogMessage: ({ multiplier }) => ({\n    fontFamily: '\"Press Start 2P\"',\n    fontSize: `${6 * multiplier}px`,\n    textTransform: \"uppercase\",\n  }),\n}));\n\nconst Message = ({\n  message = [],\n  trail = 35,\n  multiplier = 1,\n  onMessageEnded = () => {},\n  forceShowFullMessage = false,\n}) => {\n  const classes = useStyles({ multiplier });\n  const items = useMemo(\n    () =>\n      message\n        .trim()\n        .split(\"\")\n        .map((letter, index) => ({\n          item: letter,\n          key: index,\n        })),\n    [message]\n  );\n\n  const transitions = useTransition(items, {\n    trail,\n    from: { display: \"none\" },\n    enter: { display: \"\" },\n    onRest: (status, controller, item) => {\n      if (item.key === items.length - 1) {\n        onMessageEnded();\n      }\n    },\n  });\n\n  return (\n    <div className={classes.dialogMessage}>\n      {forceShowFullMessage && <span>{message}</span>}\n\n      {!forceShowFullMessage &&\n        transitions((styles, { item, key }) => (\n          <animated.span key={key} style={styles}>\n            {item}\n          </animated.span>\n        ))}\n    </div>\n  );\n};\n\nexport default Message;\n"]},"metadata":{},"sourceType":"module"}