{"ast":null,"code":"import { Input, Math as PhaserMath, Scene } from \"phaser\";\nimport { createInteractiveGameObject } from \"../utils\";\nimport { ATTACK_DELAY_TIME, BOX_INDEX, BUSH_INDEX, ENEMY_AI_TYPE, NPC_MOVEMENT_RANDOM, SCENE_FADE_TIME } from \"../constants\";\nexport default class GameScene extends Scene {\n  constructor() {\n    super(\"GameScene\");\n    this.enterKey = {};\n    this.spaceKey = {};\n    this.cursors = {};\n    this.isShowingDialog = false;\n    this.isTeleporting = false;\n    this.isAttacking = false;\n  }\n\n  init(data) {\n    this.initData = data;\n  }\n\n  calculatePreviousTeleportPosition() {\n    const currentPosition = this.gridEngine.getPosition(\"hero\");\n    const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n\n    switch (facingDirection) {\n      case \"up\":\n        {\n          return {\n            x: currentPosition.x,\n            y: currentPosition.y + 1\n          };\n        }\n\n      case \"right\":\n        {\n          return {\n            x: currentPosition.x - 1,\n            y: currentPosition.y\n          };\n        }\n\n      case \"down\":\n        {\n          return {\n            x: currentPosition.x,\n            y: currentPosition.y - 1\n          };\n        }\n\n      case \"left\":\n        {\n          return {\n            x: currentPosition.x + 1,\n            y: currentPosition.y\n          };\n        }\n\n      default:\n        {\n          return {\n            x: currentPosition.x,\n            y: currentPosition.y\n          };\n        }\n    }\n  }\n\n  getFramesForAnimation(assetKey, animation) {\n    return this.anims.generateFrameNames(assetKey).filter(frame => {\n      if (frame.frame.includes(`${assetKey}_${animation}`)) {\n        const parts = frame.frame.split(`${assetKey}_${animation}_`);\n        return Boolean(!Number.isNaN(Number.parseInt(parts[1], 10)));\n      }\n\n      return false;\n    }).sort((a, b) => a.frame < b.frame ? -1 : 1);\n  }\n\n  createPlayerWalkingAnimation(assetKey, animationName) {\n    this.anims.create({\n      key: `${assetKey}_${animationName}`,\n      frames: [{\n        key: assetKey,\n        frame: `${assetKey}_${animationName}_01`\n      }, {\n        key: assetKey,\n        frame: `${assetKey}_${animationName.replace(\"walking\", \"idle\")}_01`\n      }, {\n        key: assetKey,\n        frame: `${assetKey}_${animationName}_02`\n      }],\n      frameRate: 4,\n      repeat: -1,\n      yoyo: true\n    });\n  }\n\n  createPlayerAttackAnimation(assetKey, animationName) {\n    this.anims.create({\n      key: `${assetKey}_${animationName}`,\n      frames: [{\n        key: assetKey,\n        frame: `${assetKey}_${animationName}_01`\n      }, {\n        key: assetKey,\n        frame: `${assetKey}_${animationName}_02`\n      }, {\n        key: assetKey,\n        frame: `${assetKey}_${animationName}_03`\n      }, {\n        key: assetKey,\n        frame: `${assetKey}_${animationName}_04`\n      }, {\n        key: assetKey,\n        frame: `${assetKey}_${animationName.replace(\"attack\", \"idle\")}_01`\n      }],\n      frameRate: 16,\n      repeat: 0,\n      yoyo: false\n    });\n  }\n\n  getStopFrame(direction, spriteKey) {\n    switch (direction) {\n      case \"up\":\n        return `${spriteKey}_idle_up_01`;\n\n      case \"right\":\n        return `${spriteKey}_idle_right_01`;\n\n      case \"down\":\n        return `${spriteKey}_idle_down_01`;\n\n      case \"left\":\n        return `${spriteKey}_idle_left_01`;\n\n      default:\n        return null;\n    }\n  }\n\n  getOppositeDirection(direction) {\n    switch (direction) {\n      case \"up\":\n        return \"down\";\n\n      case \"right\":\n        return \"left\";\n\n      case \"down\":\n        return \"up\";\n\n      case \"left\":\n        return \"right\";\n\n      default:\n        return null;\n    }\n  }\n\n  getBackPosition(facingDirection, position) {\n    switch (facingDirection) {\n      case \"up\":\n        return { ...position,\n          y: position.y + 1\n        };\n\n      case \"right\":\n        return { ...position,\n          x: position.x - 1\n        };\n\n      case \"down\":\n        return { ...position,\n          y: position.y - 1\n        };\n\n      case \"left\":\n        return { ...position,\n          x: position.x + 1\n        };\n\n      default:\n        return position;\n    }\n  }\n\n  extractTeleportDataFromTiled(data) {\n    const [mapKey, position] = data.trim().split(\":\");\n    const [x, y] = position.split(\",\");\n    return {\n      mapKey,\n      x: Number.parseInt(x, 10),\n      y: Number.parseInt(y, 10)\n    };\n  }\n\n  extractNpcDataFromTiled(data) {\n    const [npcKey, config] = data.trim().split(\":\");\n    const [movementType, delay, area, direction] = config.split(\";\");\n    return {\n      npcKey,\n      movementType,\n      facingDirection: direction,\n      delay: Number.parseInt(delay, 10),\n      area: Number.parseInt(area, 10)\n    };\n  }\n\n  calculateHeroHealthState(health) {\n    if (health > 10) {\n      return \"full\";\n    }\n\n    if (health > 0) {\n      return \"half\";\n    }\n\n    return \"empty\";\n  }\n\n  calculateHeroHealthStates() {\n    return Array.from({\n      length: this.heroSprite.maxHealth / 20\n    }).fill(null).map((v, index) => this.calculateHeroHealthState(Math.max(this.heroSprite.health - 20 * index, 0)));\n  }\n\n  updateHeroHealthUi(healthStates) {\n    const customEvent = new CustomEvent(\"hero-health\", {\n      detail: {\n        healthStates\n      }\n    });\n    window.dispatchEvent(customEvent);\n  }\n\n  updateHeroCoinUi(heroCoins) {\n    const customEvent = new CustomEvent(\"hero-coin\", {\n      detail: {\n        heroCoins\n      }\n    });\n    window.dispatchEvent(customEvent);\n  }\n\n  getEnemySpecies(enemyType) {\n    if (enemyType.includes(\"slime\")) {\n      return \"slime\";\n    }\n\n    return \"slime\";\n  }\n\n  getEnemyColor(enemyType) {\n    if (enemyType.includes(\"red\")) {\n      return 0xf1374b;\n    }\n\n    if (enemyType.includes(\"green\")) {\n      return 0x2bbd6e;\n    }\n\n    if (enemyType.includes(\"yellow\")) {\n      return 0xffff4f;\n    }\n\n    return 0x00a0dc;\n  }\n\n  getEnemyAttackSpeed(enemyType) {\n    if (enemyType.includes(\"red\")) {\n      return 2000;\n    }\n\n    if (enemyType.includes(\"green\")) {\n      return 3000;\n    }\n\n    if (enemyType.includes(\"yellow\")) {\n      return 4000;\n    }\n\n    return 5000;\n  }\n\n  spawnItem(position) {\n    const isDebugMode = this.physics.config.debug;\n    const itemChance = PhaserMath.Between(1, isDebugMode ? 2 : 5);\n\n    if (itemChance === 1) {\n      const itemType = PhaserMath.Between(1, 2);\n\n      if (itemType === 1) {\n        const item = this.physics.add.sprite(position.x, position.y, \"heart\").setDepth(1).setOrigin(0, 0);\n        item.itemType = \"heart\";\n        this.itemsSprites.add(item);\n        item.anims.play(\"heart_idle\");\n      } else if (itemType === 2) {\n        const item = this.physics.add.sprite(position.x, position.y, \"coin\").setDepth(1).setOrigin(0, 0);\n        item.itemType = \"coin\";\n        this.itemsSprites.add(item);\n        item.anims.play(\"coin_idle\");\n      }\n    }\n  }\n\n  calculatePushTilePosition() {\n    const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n    const position = this.gridEngine.getPosition(\"hero\");\n\n    switch (facingDirection) {\n      case \"up\":\n        return {\n          x: position.x * 16,\n          y: (position.y - 2) * 16\n        };\n\n      case \"right\":\n        return {\n          x: (position.x + 2) * 16,\n          y: position.y * 16\n        };\n\n      case \"down\":\n        return {\n          x: position.x * 16,\n          y: (position.y + 2) * 16\n        };\n\n      case \"left\":\n        return {\n          x: (position.x - 2) * 16,\n          y: position.y * 16\n        };\n\n      default:\n        return {\n          x: position.x * 16,\n          y: position.y * 16\n        };\n    }\n  }\n\n  create() {\n    const camera = this.cameras.main;\n    const {\n      game\n    } = this.sys;\n    const isDebugMode = this.physics.config.debug;\n    const {\n      heroStatus,\n      mapKey\n    } = this.initData;\n    const {\n      position: initialPosition,\n      frame: initialFrame,\n      facingDirection: initialFacingDirection,\n      previousPosition,\n      health: heroHealth,\n      maxHealth: heroMaxHealth,\n      coin: heroCoin,\n      canPush: heroCanPush,\n      haveSword: heroHaveSword,\n      haveApple: heroHaveApple,\n      haveAvocado: heroHaveAvocado,\n      haveBanana: heroHaveBanana,\n      haveCherries: heroHaveCherries,\n      haveOrange: heroHaveOrange,\n      havePineapple: heroHavePineapple,\n      haveWatermelon: heroHaveWatermelon\n    } = heroStatus;\n    camera.fadeIn(SCENE_FADE_TIME);\n    this.enterKey = this.input.keyboard.addKey(Input.Keyboard.KeyCodes.ENTER);\n    this.spaceKey = this.input.keyboard.addKey(Input.Keyboard.KeyCodes.SPACE);\n    this.cursors = this.input.keyboard.createCursorKeys(); // this.wasd = this.input.keyboard.addKeys({\n    //     up: Input.Keyboard.KeyCodes.W,\n    //     down: Input.Keyboard.KeyCodes.S,\n    //     left: Input.Keyboard.KeyCodes.A,\n    //     right: Input.Keyboard.KeyCodes.D,\n    // });\n    // Map\n\n    const map = this.make.tilemap({\n      key: mapKey\n    });\n    map.addTilesetImage(\"tileset\", \"tileset\");\n\n    if (isDebugMode) {\n      window.phaserGame = game;\n      this.map = map;\n    } // Hero\n\n\n    this.heroSprite = this.physics.add.sprite(0, 0, \"hero\", initialFrame).setDepth(1);\n    this.heroSprite.health = heroHealth;\n    this.heroSprite.maxHealth = heroMaxHealth;\n    this.heroSprite.coin = heroCoin;\n    this.heroSprite.canPush = heroCanPush;\n    this.heroSprite.haveSword = heroHaveSword;\n    this.heroSprite.haveApple = heroHaveApple;\n    this.heroSprite.haveAvocado = heroHaveAvocado;\n    this.heroSprite.haveBanana = heroHaveBanana;\n    this.heroSprite.haveCherries = heroHaveCherries;\n    this.heroSprite.haveOrange = heroHaveOrange;\n    this.heroSprite.havePineapple = heroHavePineapple;\n    this.heroSprite.haveWatermelon = heroHaveWatermelon;\n    this.updateHeroHealthUi(this.calculateHeroHealthStates());\n    this.updateHeroCoinUi(heroCoin);\n\n    this.heroSprite.restoreHealth = restore => {\n      this.heroSprite.health = Math.min(this.heroSprite.health + restore, this.heroSprite.maxHealth);\n      this.updateHeroHealthUi(this.calculateHeroHealthStates());\n    };\n\n    this.heroSprite.increaseMaxHealth = increase => {\n      this.heroSprite.maxHealth += increase;\n      this.updateHeroHealthUi(this.calculateHeroHealthStates());\n    };\n\n    this.heroSprite.collectCoin = coinQuantity => {\n      this.heroSprite.coin = Math.min(this.heroSprite.coin + coinQuantity, 999);\n      this.updateHeroCoinUi(this.heroSprite.coin);\n    };\n\n    this.heroSprite.takeDamage = damage => {\n      this.time.delayedCall(180, () => {\n        this.heroSprite.health -= damage;\n\n        if (this.heroSprite.health <= 0) {\n          camera.fadeOut(SCENE_FADE_TIME);\n          this.updateHeroHealthUi([]);\n          this.updateHeroCoinUi(null);\n          this.time.delayedCall(SCENE_FADE_TIME, () => {\n            this.isTeleporting = false;\n            this.scene.start(\"GameOverScene\");\n          });\n        } else {\n          this.updateHeroHealthUi(this.calculateHeroHealthStates());\n          this.tweens.add({\n            targets: this.heroSprite,\n            alpha: 0,\n            ease: PhaserMath.Easing.Elastic.InOut,\n            duration: 70,\n            repeat: 1,\n            yoyo: true\n          });\n        }\n      });\n    };\n\n    this.heroSprite.body.setSize(14, 14);\n    this.heroSprite.body.setOffset(9, 13);\n    this.heroActionCollider = createInteractiveGameObject(this, this.heroSprite.x + 9, this.heroSprite.y + 36, 14, 8, \"attack\", isDebugMode);\n    this.heroPresenceCollider = createInteractiveGameObject(this, this.heroSprite.x + 16, this.heroSprite.y + 20, 320, // TODO\n    320, // TODO\n    \"presence\", isDebugMode, {\n      x: 0.5,\n      y: 0.5\n    });\n    this.heroObjectCollider = createInteractiveGameObject(this, this.heroSprite.x + 16, this.heroSprite.y + 20, 24, 24, \"object\", isDebugMode, {\n      x: 0.5,\n      y: 0.5\n    }); // Items\n\n    this.itemsSprites = this.add.group();\n\n    if (!this.anims.exists(\"heart_idle\")) {\n      this.anims.create({\n        key: \"heart_idle\",\n        frames: this.getFramesForAnimation(\"heart\", \"idle\"),\n        frameRate: 4,\n        repeat: -1,\n        yoyo: false\n      });\n    }\n\n    if (!this.anims.exists(\"coin_idle\")) {\n      this.anims.create({\n        key: \"coin_idle\",\n        frames: this.getFramesForAnimation(\"coin\", \"idle\"),\n        frameRate: 4,\n        repeat: -1,\n        yoyo: false\n      });\n    }\n\n    const enemiesData = [];\n    const elementsLayers = this.add.group();\n\n    for (let i = 0; i < map.layers.length; i++) {\n      const layer = map.createLayer(i, \"tileset\", 0, 0);\n      layer.layer.properties.forEach(property => {\n        const {\n          value,\n          name\n        } = property;\n\n        if (name === \"type\" && value === \"elements\") {\n          elementsLayers.add(layer);\n        }\n      });\n      this.physics.add.collider(this.heroSprite, layer);\n    }\n\n    const npcsKeys = [];\n    const dataLayer = map.getObjectLayer(\"actions\");\n    dataLayer.objects.forEach(data => {\n      const {\n        properties,\n        x,\n        y\n      } = data;\n      properties.forEach(property => {\n        const {\n          name,\n          type,\n          value\n        } = property;\n\n        switch (name) {\n          case \"dialog\":\n            {\n              const customCollider = createInteractiveGameObject(this, x, y, 16, 16, \"dialog\", isDebugMode);\n              this.physics.add.overlap(this.heroActionCollider, customCollider, (objA, objB) => {\n                if (this.isShowingDialog) {\n                  return;\n                }\n\n                if (Input.Keyboard.JustDown(this.enterKey)) {\n                  const characterName = value;\n                  const customEvent = new CustomEvent(\"new-dialog\", {\n                    detail: {\n                      characterName\n                    }\n                  });\n                  window.dispatchEvent(customEvent);\n\n                  const dialogBoxFinishedEventListener = () => {\n                    window.removeEventListener(`${characterName}-dialog-finished`, dialogBoxFinishedEventListener); // just to consume the JustDown\n\n                    Input.Keyboard.JustDown(this.enterKey);\n                    Input.Keyboard.JustDown(this.spaceKey);\n                    this.time.delayedCall(100, () => {\n                      this.isShowingDialog = false;\n                    });\n                  };\n\n                  window.addEventListener(`${characterName}-dialog-finished`, dialogBoxFinishedEventListener);\n                  this.isShowingDialog = true;\n                }\n              });\n              break;\n            }\n          //   case \"npcData\": {\n          //     const { facingDirection, movementType, npcKey, delay, area } =\n          //       this.extractNpcDataFromTiled(value);\n          //     npcsKeys.push({\n          //       facingDirection,\n          //       movementType,\n          //       npcKey,\n          //       delay,\n          //       area,\n          //       x,\n          //       y,\n          //     });\n          //     break;\n          //   }\n\n          case \"itemData\":\n            {\n              const [itemType] = value.split(\":\");\n\n              switch (itemType) {\n                case \"coin\":\n                  {\n                    const item = this.physics.add.sprite(x, y, \"coin\").setDepth(1).setOrigin(0, 1);\n                    item.itemType = \"coin\";\n                    this.itemsSprites.add(item);\n                    item.anims.play(\"coin_idle\");\n                    break;\n                  }\n\n                case \"heart_container\":\n                  {\n                    const item = this.physics.add.sprite(x, y, \"heart_container\").setDepth(1).setOrigin(0, 1);\n                    item.itemType = \"heart_container\";\n                    this.itemsSprites.add(item);\n                    break;\n                  }\n\n                case \"heart\":\n                  {\n                    const item = this.physics.add.sprite(x, y, \"heart\").setDepth(1).setOrigin(0, 1);\n                    item.itemType = \"heart\";\n                    this.itemsSprites.add(item);\n                    item.anims.play(\"heart_idle\");\n                    break;\n                  }\n\n                case \"sword\":\n                  {\n                    if (!heroHaveSword) {\n                      const item = this.physics.add.sprite(x, y, \"sword\").setDepth(1).setOrigin(0, 1);\n                      item.itemType = \"sword\";\n                      this.itemsSprites.add(item);\n                    }\n\n                    break;\n                  }\n\n                case \"apple\":\n                  {\n                    if (!heroHaveApple) {\n                      const item = this.physics.add.sprite(x, y, \"apple\").setDepth(1).setOrigin(0, 1);\n                      item.itemType = \"apple\";\n                      this.itemsSprites.add(item);\n                    }\n\n                    break;\n                  }\n\n                case \"avocado\":\n                  {\n                    if (!heroHaveAvocado) {\n                      const item = this.physics.add.sprite(x, y, \"avocado\").setDepth(1).setOrigin(0, 1);\n                      item.itemType = \"avocado\";\n                      this.itemsSprites.add(item);\n                    }\n\n                    break;\n                  }\n\n                case \"banana\":\n                  {\n                    if (!heroHaveBanana) {\n                      const item = this.physics.add.sprite(x, y, \"banana\").setDepth(1).setOrigin(0, 1);\n                      item.itemType = \"banana\";\n                      this.itemsSprites.add(item);\n                    }\n\n                    break;\n                  }\n\n                case \"cherries\":\n                  {\n                    if (!heroHaveCherries) {\n                      const item = this.physics.add.sprite(x, y, \"cherries\").setDepth(1).setOrigin(0, 1);\n                      item.itemType = \"cherries\";\n                      this.itemsSprites.add(item);\n                    }\n\n                    break;\n                  }\n\n                case \"orange\":\n                  {\n                    if (!heroHaveOrange) {\n                      const item = this.physics.add.sprite(x, y, \"orange\").setDepth(1).setOrigin(0, 1);\n                      item.itemType = \"orange\";\n                      this.itemsSprites.add(item);\n                    }\n\n                    break;\n                  }\n\n                case \"pineapple\":\n                  {\n                    if (!heroHavePineapple) {\n                      const item = this.physics.add.sprite(x, y, \"pineapple\").setDepth(1).setOrigin(0, 1);\n                      item.itemType = \"pineapple\";\n                      this.itemsSprites.add(item);\n                    }\n\n                    break;\n                  }\n\n                case \"watermelon\":\n                  {\n                    if (!heroHaveWatermelon) {\n                      const item = this.physics.add.sprite(x, y, \"watermelon\").setDepth(1).setOrigin(0, 1);\n                      item.itemType = \"watermelon\";\n                      this.itemsSprites.add(item);\n                    }\n\n                    break;\n                  }\n\n                case \"push\":\n                  {\n                    if (!heroCanPush) {\n                      const item = this.physics.add.sprite(x, y, \"push\").setDepth(1).setOrigin(0, 1);\n                      item.itemType = \"push\";\n                      this.itemsSprites.add(item);\n                    }\n\n                    break;\n                  }\n\n                default:\n                  {\n                    break;\n                  }\n              }\n\n              break;\n            }\n\n          case \"enemyData\":\n            {\n              const [enemyType, enemyAI, speed, health] = value.split(\":\");\n              enemiesData.push({\n                x,\n                y,\n                speed: Number.parseInt(speed, 10),\n                enemyType,\n                enemySpecies: this.getEnemySpecies(enemyType),\n                enemyAI,\n                enemyName: `${enemyType}_${enemiesData.length}`,\n                health: Number.parseInt(health, 10)\n              });\n              break;\n            }\n\n          case \"teleportTo\":\n            {\n              const customCollider = createInteractiveGameObject(this, x, y, 16, 16, \"teleport\", isDebugMode);\n              const {\n                mapKey: teleportToMapKey,\n                x: teleportToX,\n                y: teleportToY\n              } = this.extractTeleportDataFromTiled(value);\n              const overlapCollider = this.physics.add.overlap(this.heroSprite, customCollider, () => {\n                // camera.stopFollow();\n                this.physics.world.removeCollider(overlapCollider);\n                const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n                camera.fadeOut(SCENE_FADE_TIME); // this.scene.pause();\n\n                this.isTeleporting = true; // this.gridEngine.stopMovement('hero');\n\n                this.time.delayedCall(SCENE_FADE_TIME, () => {\n                  this.isTeleporting = false;\n                  this.scene.restart({\n                    heroStatus: {\n                      position: {\n                        x: teleportToX,\n                        y: teleportToY\n                      },\n                      previousPosition: this.calculatePreviousTeleportPosition(),\n                      frame: `hero_idle_${facingDirection}_01`,\n                      facingDirection,\n                      health: this.heroSprite.health,\n                      maxHealth: this.heroSprite.maxHealth,\n                      coin: this.heroSprite.coin,\n                      canPush: this.heroSprite.canPush,\n                      haveSword: this.heroSprite.haveSword,\n                      haveApple: this.heroSprite.haveApple,\n                      haveAvocado: this.heroSprite.haveAvocado,\n                      haveBanana: this.heroSprite.haveBanana,\n                      haveCherries: this.heroSprite.haveCherries,\n                      haveOrange: this.heroSprite.haveOrange,\n                      havePineapple: this.heroSprite.havePineapple,\n                      haveWatermelon: this.heroSprite.haveWatermelon\n                    },\n                    mapKey: teleportToMapKey\n                  });\n                });\n              });\n              break;\n            }\n\n          default:\n            {\n              break;\n            }\n        }\n      });\n    });\n    camera.startFollow(this.heroSprite, true);\n    camera.setFollowOffset(-this.heroSprite.width, -this.heroSprite.height);\n    camera.setBounds(0, 0, Math.max(map.widthInPixels, game.scale.gameSize.width), Math.max(map.heightInPixels, game.scale.gameSize.height));\n\n    if (map.widthInPixels < game.scale.gameSize.width) {\n      camera.setPosition((game.scale.gameSize.width - map.widthInPixels) / 2);\n    }\n\n    if (map.heightInPixels < game.scale.gameSize.height) {\n      camera.setPosition(camera.x, (game.scale.gameSize.height - map.heightInPixels) / 2);\n    }\n\n    const gridEngineConfig = {\n      characters: [{\n        id: \"hero\",\n        sprite: this.heroSprite,\n        startPosition: initialPosition,\n        offsetY: 4\n      }]\n    };\n    this.physics.add.overlap(this.heroSprite, this.itemsSprites, (objA, objB) => {\n      const question = localStorage.getItem(\"question\");\n      const item = [objA, objB].find(obj => obj !== this.heroSprite);\n\n      if (item.itemType === \"heart\") {\n        this.heroSprite.restoreHealth(20);\n        item.setVisible(false);\n        item.destroy();\n      }\n\n      if (item.itemType === \"coin\") {\n        this.heroSprite.collectCoin(1);\n        item.setVisible(false);\n        item.destroy();\n      }\n\n      if (item.itemType === \"heart_container\") {\n        this.heroSprite.increaseMaxHealth(20);\n        item.setVisible(false);\n        item.destroy();\n      }\n\n      if (item.itemType === \"sword\") {\n        const customEvent = new CustomEvent(\"new-dialog\", {\n          detail: {\n            characterName: item.itemType\n          }\n        });\n        window.dispatchEvent(customEvent);\n        this.isShowingDialog = true;\n\n        const dialogBoxFinishedEventListener = () => {\n          window.removeEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n          this.time.delayedCall(100, () => {\n            this.isShowingDialog = false;\n          });\n        };\n\n        window.addEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n        this.heroSprite.haveSword = true;\n        item.setVisible(false);\n        item.destroy();\n      }\n\n      if (item.itemType === \"apple\") {\n        const customEvent = new CustomEvent(\"new-dialog\", {\n          detail: {\n            characterName: item.itemType\n          }\n        });\n        window.dispatchEvent(customEvent);\n\n        const dialogBoxFinishedEventListener = () => {\n          window.removeEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n          this.time.delayedCall(100, () => {\n            this.isShowingDialog = false;\n          });\n        };\n\n        window.addEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n        this.heroSprite.haveApple = true;\n\n        if (item.itemType === question) {\n          item.setVisible(false);\n          item.destroy();\n          this.isShowingDialog = true;\n        }\n      }\n\n      if (item.itemType === \"avocado\") {\n        const customEvent = new CustomEvent(\"new-dialog\", {\n          detail: {\n            characterName: item.itemType\n          }\n        });\n        window.dispatchEvent(customEvent);\n\n        const dialogBoxFinishedEventListener = () => {\n          window.removeEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n          this.time.delayedCall(100, () => {\n            this.isShowingDialog = false;\n          });\n        };\n\n        window.addEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n        this.heroSprite.haveAvocado = true;\n\n        if (item.itemType === question) {\n          this.isShowingDialog = true;\n          item.setVisible(false);\n          item.destroy();\n        }\n      }\n\n      if (item.itemType === \"banana\") {\n        const customEvent = new CustomEvent(\"new-dialog\", {\n          detail: {\n            characterName: item.itemType\n          }\n        });\n        window.dispatchEvent(customEvent);\n\n        const dialogBoxFinishedEventListener = () => {\n          window.removeEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n          this.time.delayedCall(100, () => {\n            this.isShowingDialog = false;\n          });\n        };\n\n        window.addEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n        this.heroSprite.haveBanana = true;\n\n        if (item.itemType === question) {\n          this.isShowingDialog = true;\n          item.setVisible(false);\n          item.destroy();\n        }\n      }\n\n      if (item.itemType === \"cherries\") {\n        const customEvent = new CustomEvent(\"new-dialog\", {\n          detail: {\n            characterName: item.itemType\n          }\n        });\n        window.dispatchEvent(customEvent);\n\n        const dialogBoxFinishedEventListener = () => {\n          window.removeEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n          this.time.delayedCall(100, () => {\n            this.isShowingDialog = false;\n          });\n        };\n\n        window.addEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n        this.heroSprite.haveCherries = true;\n\n        if (item.itemType === question) {\n          this.isShowingDialog = true;\n          item.setVisible(false);\n          item.destroy();\n        }\n      }\n\n      if (item.itemType === \"orange\") {\n        console.log(\"123\");\n        const customEvent = new CustomEvent(\"new-dialog\", {\n          detail: {\n            characterName: item.itemType\n          }\n        });\n        window.dispatchEvent(customEvent);\n\n        const dialogBoxFinishedEventListener = () => {\n          window.removeEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n          this.time.delayedCall(100, () => {\n            this.isShowingDialog = false;\n          });\n        };\n\n        window.addEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n        this.heroSprite.haveOrange = true;\n\n        if (item.itemType === question) {\n          this.isShowingDialog = true;\n          item.setVisible(false);\n          item.destroy();\n        }\n      }\n\n      if (item.itemType === \"pineapple\") {\n        const customEvent = new CustomEvent(\"new-dialog\", {\n          detail: {\n            characterName: item.itemType\n          }\n        });\n        window.dispatchEvent(customEvent);\n\n        const dialogBoxFinishedEventListener = () => {\n          window.removeEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n          this.time.delayedCall(100, () => {\n            this.isShowingDialog = false;\n          });\n        };\n\n        window.addEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n        this.heroSprite.havePineapple = true;\n\n        if (item.itemType === question) {\n          this.isShowingDialog = true;\n          item.setVisible(false);\n          item.destroy();\n        }\n      }\n\n      if (item.itemType === \"watermelon\") {\n        const customEvent = new CustomEvent(\"new-dialog\", {\n          detail: {\n            characterName: item.itemType\n          }\n        });\n        window.dispatchEvent(customEvent);\n\n        const dialogBoxFinishedEventListener = () => {\n          window.removeEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n          this.time.delayedCall(100, () => {\n            this.isShowingDialog = false;\n          });\n        };\n\n        window.addEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n        this.heroSprite.haveWatermelon = true;\n\n        if (item.itemType === question) {\n          this.isShowingDialog = true;\n          item.setVisible(false);\n          item.destroy();\n        }\n      }\n\n      if (item.itemType === \"push\") {\n        const customEvent = new CustomEvent(\"new-dialog\", {\n          detail: {\n            characterName: item.itemType\n          }\n        });\n        window.dispatchEvent(customEvent);\n\n        const dialogBoxFinishedEventListener = () => {\n          window.removeEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n          this.time.delayedCall(100, () => {\n            this.isShowingDialog = false;\n          });\n        };\n\n        window.addEventListener(`${item.itemType}-dialog-finished`, dialogBoxFinishedEventListener);\n        this.heroSprite.canPush = true;\n\n        if (item.itemType === question) {\n          this.isShowingDialog = true;\n          item.setVisible(false);\n          item.destroy();\n        }\n      }\n    });\n    this.enemiesSprites = this.add.group();\n    enemiesData.forEach((enemyData, index) => {\n      const {\n        enemySpecies,\n        enemyType,\n        x,\n        y,\n        enemyName,\n        speed,\n        enemyAI,\n        health\n      } = enemyData;\n      const enemy = this.physics.add.sprite(0, 0, enemyType, `${enemySpecies}_idle_01`);\n      enemy.setTint(this.getEnemyColor(enemyType));\n      enemy.name = enemyName;\n      enemy.enemyType = enemyType;\n      enemy.enemySpecies = enemySpecies;\n      enemy.enemyAI = enemyAI;\n      enemy.speed = speed;\n      enemy.health = health;\n      enemy.isAttacking = false;\n      enemy.updateFollowHeroPosition = true;\n      enemy.lastKnowHeroPosition = {\n        x: 0,\n        y: 0\n      };\n      enemy.body.setSize(14, 14);\n      enemy.body.setOffset(9, 21);\n      this.enemiesSprites.add(enemy);\n\n      enemy.takeDamage = (damage, isSpaceJustDown) => {\n        if (isSpaceJustDown) {\n          enemy.health -= damage;\n\n          if (enemy.health < 0) {\n            enemy.setVisible(false);\n            const position = this.gridEngine.getPosition(enemy.name);\n            this.spawnItem({\n              x: position.x * 16,\n              y: position.y * 16\n            });\n            this.gridEngine.setPosition(enemy.name, {\n              x: 1,\n              y: 1\n            });\n            enemy.destroy();\n          } else {\n            this.tweens.add({\n              targets: enemy,\n              alpha: 0,\n              ease: PhaserMath.Easing.Elastic.InOut,\n              duration: 70,\n              repeat: 1,\n              yoyo: true\n            });\n          }\n        }\n      };\n\n      if (!this.anims.exists(`${enemySpecies}_idle`)) {\n        this.anims.create({\n          key: `${enemySpecies}_idle`,\n          frames: this.getFramesForAnimation(enemySpecies, \"idle\"),\n          frameRate: 8,\n          repeat: -1,\n          yoyo: false\n        });\n      }\n\n      if (!this.anims.exists(`${enemySpecies}_attack`)) {\n        this.anims.create({\n          key: `${enemySpecies}_attack`,\n          frames: this.getFramesForAnimation(enemySpecies, \"attack\"),\n          frameRate: 12,\n          repeat: 0,\n          yoyo: false\n        });\n      }\n\n      if (!this.anims.exists(`${enemySpecies}_walking`)) {\n        this.anims.create({\n          key: `${enemySpecies}_walking`,\n          frames: this.getFramesForAnimation(enemySpecies, \"walking\"),\n          frameRate: 8,\n          repeat: -1,\n          yoyo: false\n        });\n      }\n\n      if (!this.anims.exists(`${enemySpecies}_die`)) {\n        this.anims.create({\n          key: `${enemySpecies}_die`,\n          frames: this.getFramesForAnimation(enemySpecies, \"die\"),\n          frameRate: 8,\n          repeat: 0,\n          yoyo: false\n        });\n      }\n\n      enemy.anims.play(`${enemySpecies}_idle`);\n      enemy.on(\"animationcomplete\", animation => {\n        if (animation.key.includes(\"attack\")) {\n          enemy.anims.play(`${enemySpecies}_idle`);\n        }\n      });\n      gridEngineConfig.characters.push({\n        id: enemyName,\n        sprite: enemy,\n        startPosition: {\n          x: x / 16,\n          y: y / 16 - 1\n        },\n        speed,\n        offsetY: -4\n      });\n    });\n    const npcSprites = this.add.group();\n    npcsKeys.forEach(npcData => {\n      const {\n        npcKey,\n        x,\n        y,\n        facingDirection = \"down\"\n      } = npcData;\n      const npc = this.physics.add.sprite(0, 0, npcKey, `${npcKey}_idle_${facingDirection}_01`);\n      npc.body.setSize(14, 14);\n      npc.body.setOffset(9, 13);\n      npcSprites.add(npc);\n      this.createPlayerWalkingAnimation(npcKey, \"walking_up\");\n      this.createPlayerWalkingAnimation(npcKey, \"walking_right\");\n      this.createPlayerWalkingAnimation(npcKey, \"walking_down\");\n      this.createPlayerWalkingAnimation(npcKey, \"walking_left\");\n      gridEngineConfig.characters.push({\n        id: npcKey,\n        sprite: npc,\n        startPosition: {\n          x: x / 16,\n          y: y / 16 - 1\n        },\n        speed: 1,\n        offsetY: 4\n      });\n    }); // Movement\n\n    this.createPlayerWalkingAnimation(\"hero\", \"walking_up\");\n    this.createPlayerWalkingAnimation(\"hero\", \"walking_right\");\n    this.createPlayerWalkingAnimation(\"hero\", \"walking_down\");\n    this.createPlayerWalkingAnimation(\"hero\", \"walking_left\"); // Attack\n\n    this.createPlayerAttackAnimation(\"hero\", \"attack_up\", 12, 0, false);\n    this.createPlayerAttackAnimation(\"hero\", \"attack_right\", 12, 0, false);\n    this.createPlayerAttackAnimation(\"hero\", \"attack_down\", 12, 0, false);\n    this.createPlayerAttackAnimation(\"hero\", \"attack_left\", 12, 0, false);\n    this.heroSprite.on(\"animationcomplete\", (animation, animationFrame) => {\n      if (animation.key.includes(\"attack\")) {\n        this.isAttacking = false;\n      }\n    });\n    this.heroSprite.on(\"animationstop\", (animation, animationFrame) => {\n      if (animation.key.includes(\"attack\")) {\n        this.isAttacking = false;\n      }\n    });\n    this.gridEngine.create(map, gridEngineConfig); // NPCs\n\n    npcsKeys.forEach(npcData => {\n      const {\n        movementType,\n        npcKey,\n        delay,\n        area\n      } = npcData;\n\n      if (movementType === NPC_MOVEMENT_RANDOM) {\n        this.gridEngine.moveRandomly(npcKey, delay, area);\n      }\n    }); // enemies\n\n    enemiesData.forEach(enemyData => {\n      const {\n        enemyAI,\n        enemyName,\n        speed\n      } = enemyData;\n      this.gridEngine.moveRandomly(enemyName, 1000, 4);\n    });\n    this.physics.add.overlap(this.heroObjectCollider, this.enemiesSprites, (objA, objB) => {\n      const enemy = [objA, objB].find(obj => obj !== this.heroObjectCollider);\n\n      if (enemy.isAttacking || this.gridEngine.isMoving(enemy.name)) {\n        return;\n      }\n\n      enemy.anims.play(`${enemy.enemySpecies}_attack`);\n      this.heroSprite.takeDamage(10);\n      enemy.isAttacking = true;\n      this.time.delayedCall(this.getEnemyAttackSpeed(enemy.enemyType), () => {\n        enemy.isAttacking = false;\n      });\n    });\n    this.physics.add.overlap(this.heroPresenceCollider, this.enemiesSprites, (objA, objB) => {\n      const enemy = [objA, objB].find(obj => obj !== this.heroPresenceCollider);\n\n      if (enemy.canSeeHero && enemy.enemyAI === ENEMY_AI_TYPE) {\n        enemy.isFollowingHero = true;\n\n        if (enemy.updateFollowHeroPosition) {\n          const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n          const heroPosition = this.gridEngine.getPosition(\"hero\");\n          const heroBackPosition = this.getBackPosition(facingDirection, heroPosition);\n\n          if (enemy.lastKnowHeroPosition.x !== heroBackPosition.x || enemy.lastKnowHeroPosition.y !== heroBackPosition.y) {\n            const enemyPosition = this.gridEngine.getPosition(enemy.name);\n            enemy.lastKnowHeroPosition = heroBackPosition;\n\n            if (heroBackPosition.x === enemyPosition.x && heroBackPosition.y === enemyPosition.y) {\n              enemy.updateFollowHeroPosition = false; // TODO can attack I guess\n\n              return;\n            }\n\n            enemy.updateFollowHeroPosition = false;\n            this.time.delayedCall(1000, () => {\n              enemy.updateFollowHeroPosition = true;\n            });\n            this.gridEngine.setSpeed(enemy.name, Math.ceil(enemy.speed * 1.5));\n            this.gridEngine.moveTo(enemy.name, heroBackPosition, {\n              NoPathFoundStrategy: \"CLOSEST_REACHABLE\"\n            });\n          }\n        }\n      }\n\n      enemy.canSeeHero = enemy.body.embedded;\n    }); // Animations\n\n    this.gridEngine.movementStarted().subscribe(_ref => {\n      let {\n        charId,\n        direction\n      } = _ref;\n\n      if (charId === \"hero\") {\n        this.heroSprite.anims.play(`hero_walking_${direction}`);\n      } else {\n        const npc = npcSprites.getChildren().find(npcSprite => npcSprite.texture.key === charId);\n\n        if (npc) {\n          npc.anims.play(`${charId}_walking_${direction}`);\n          return;\n        }\n\n        const enemy = this.enemiesSprites.getChildren().find(enemySprite => enemySprite.name === charId);\n\n        if (enemy) {\n          enemy.anims.play(`${enemy.enemySpecies}_walking`);\n        }\n      }\n    });\n    this.gridEngine.movementStopped().subscribe(_ref2 => {\n      let {\n        charId,\n        direction\n      } = _ref2;\n\n      if (charId === \"hero\") {\n        this.heroSprite.anims.stop();\n        this.heroSprite.setFrame(this.getStopFrame(direction, charId));\n      } else {\n        const npc = npcSprites.getChildren().find(npcSprite => npcSprite.texture.key === charId);\n\n        if (npc) {\n          npc.anims.stop();\n          npc.setFrame(this.getStopFrame(direction, charId));\n          return;\n        }\n\n        const enemy = this.enemiesSprites.getChildren().find(enemySprite => enemySprite.name === charId);\n\n        if (enemy) {\n          enemy.anims.play(`${enemy.enemySpecies}_idle`, true);\n        }\n      }\n    });\n    this.gridEngine.directionChanged().subscribe(_ref3 => {\n      let {\n        charId,\n        direction\n      } = _ref3;\n\n      if (charId === \"hero\") {\n        this.heroSprite.setFrame(this.getStopFrame(direction, charId));\n      } else {\n        const npc = npcSprites.getChildren().find(npcSprite => npcSprite.texture.key === charId);\n\n        if (npc) {\n          npc.setFrame(this.getStopFrame(direction, charId));\n          return;\n        }\n\n        const enemy = this.enemiesSprites.getChildren().find(enemySprite => enemySprite.name === charId);\n\n        if (enemy) {\n          enemy.anims.play(`${enemy.enemySpecies}_idle`);\n        }\n      }\n    });\n\n    this.heroActionCollider.update = () => {\n      const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n      this.heroPresenceCollider.setPosition(this.heroSprite.x + 16, this.heroSprite.y + 20);\n      this.heroObjectCollider.setPosition(this.heroSprite.x + 16, this.heroSprite.y + 20);\n\n      switch (facingDirection) {\n        case \"down\":\n          {\n            this.heroActionCollider.setSize(14, 8);\n            this.heroActionCollider.body.setSize(14, 8);\n            this.heroActionCollider.setX(this.heroSprite.x + 9);\n            this.heroActionCollider.setY(this.heroSprite.y + 36);\n            break;\n          }\n\n        case \"up\":\n          {\n            this.heroActionCollider.setSize(14, 8);\n            this.heroActionCollider.body.setSize(14, 8);\n            this.heroActionCollider.setX(this.heroSprite.x + 9);\n            this.heroActionCollider.setY(this.heroSprite.y + 12);\n            break;\n          }\n\n        case \"left\":\n          {\n            this.heroActionCollider.setSize(8, 14);\n            this.heroActionCollider.body.setSize(8, 14);\n            this.heroActionCollider.setX(this.heroSprite.x);\n            this.heroActionCollider.setY(this.heroSprite.y + 21);\n            break;\n          }\n\n        case \"right\":\n          {\n            this.heroActionCollider.setSize(8, 14);\n            this.heroActionCollider.body.setSize(8, 14);\n            this.heroActionCollider.setX(this.heroSprite.x + 24);\n            this.heroActionCollider.setY(this.heroSprite.y + 21);\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    };\n\n    this.physics.add.overlap(this.heroActionCollider, npcSprites, (objA, objB) => {\n      if (this.isShowingDialog) {\n        return;\n      }\n\n      const npc = [objA, objB].find(obj => obj !== this.heroActionCollider);\n\n      if (Input.Keyboard.JustDown(this.enterKey)) {\n        if (this.gridEngine.isMoving(npc.texture.key)) {\n          return;\n        }\n\n        const characterName = npc.texture.key;\n        const customEvent = new CustomEvent(\"new-dialog\", {\n          detail: {\n            characterName\n          }\n        });\n        window.dispatchEvent(customEvent);\n\n        const dialogBoxFinishedEventListener = () => {\n          window.removeEventListener(`${characterName}-dialog-finished`, dialogBoxFinishedEventListener);\n          this.gridEngine.moveRandomly(characterName); // just to consume the JustDown\n\n          Input.Keyboard.JustDown(this.enterKey);\n          Input.Keyboard.JustDown(this.spaceKey);\n          this.time.delayedCall(100, () => {\n            this.isShowingDialog = false;\n            const {\n              delay,\n              area\n            } = npcsKeys.find(npcData => npcData.npcKey === characterName);\n            this.gridEngine.moveRandomly(characterName, delay, area);\n          });\n        };\n\n        window.addEventListener(`${characterName}-dialog-finished`, dialogBoxFinishedEventListener);\n        this.isShowingDialog = true;\n        const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n        this.gridEngine.stopMovement(characterName);\n        npc.setFrame(this.getStopFrame(this.getOppositeDirection(facingDirection), characterName));\n      }\n    });\n    this.physics.add.overlap(this.heroActionCollider, elementsLayers, (objA, objB) => {\n      const tile = [objA, objB].find(obj => obj !== this.heroActionCollider); // Handles attack\n\n      if ((tile === null || tile === void 0 ? void 0 : tile.index) > 0 && !tile.wasHandled) {\n        switch (tile.index) {\n          case BUSH_INDEX:\n            {\n              if (this.isAttacking) {\n                tile.wasHandled = true;\n                this.time.delayedCall(ATTACK_DELAY_TIME, () => {\n                  tile.setVisible(false);\n                  this.spawnItem({\n                    x: tile.pixelX,\n                    y: tile.pixelY\n                  });\n                  tile.destroy();\n                });\n              }\n\n              break;\n            }\n\n          case BOX_INDEX:\n            {\n              if (this.heroSprite.canPush && this.isAttacking) {\n                const newPosition = this.calculatePushTilePosition();\n                const canBePushed = map.layers.every(layer => {\n                  var _t$properties;\n\n                  const t = layer.tilemapLayer.getTileAtWorldXY(newPosition.x, newPosition.y);\n                  return !(t !== null && t !== void 0 && (_t$properties = t.properties) !== null && _t$properties !== void 0 && _t$properties.ge_collide);\n                });\n\n                if (canBePushed && !tile.isMoved) {\n                  tile.isMoved = true;\n                  this.tweens.add({\n                    targets: tile,\n                    pixelX: newPosition.x,\n                    pixelY: newPosition.y,\n                    ease: \"Power2\",\n                    // PhaserMath.Easing\n                    duration: 700,\n                    onComplete: () => {\n                      tile.setVisible(false);\n                      const newTile = tile.layer.tilemapLayer.putTileAt(BOX_INDEX, newPosition.x / 16, newPosition.y / 16, true);\n                      newTile.properties = { ...tile.properties\n                      };\n                      newTile.isMoved = true;\n                      tile.destroy();\n                    }\n                  });\n                }\n              }\n\n              break;\n            }\n\n          default:\n            {\n              break;\n            }\n        }\n      }\n    });\n    this.physics.add.overlap(this.heroActionCollider, this.enemiesSprites, (objA, objB) => {\n      const enemy = [objA, objB].find(obj => obj !== this.heroActionCollider); // Handles attack\n\n      if (this.isAttacking) {\n        const isSpaceJustDown = this.isSpaceJustDown;\n        this.time.delayedCall(ATTACK_DELAY_TIME, () => {\n          enemy.takeDamage(25, isSpaceJustDown);\n        });\n      }\n    });\n  }\n\n  update() {\n    this.isSpaceJustDown = Input.Keyboard.JustDown(this.spaceKey);\n\n    if (this.isTeleporting || this.isAttacking || this.isShowingDialog) {\n      return;\n    }\n\n    if (!this.gridEngine.isMoving(\"hero\") && this.isSpaceJustDown && this.heroSprite.haveApple && this.heroSprite.haveAvocado && this.heroSprite.haveBanana && this.heroSprite.haveCherries && this.heroSprite.haveOrange && this.heroSprite.havePineapple && this.heroSprite.haveWatermelon) {\n      const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n      this.heroSprite.anims.play(`hero_attack_${facingDirection}`);\n      this.isAttacking = true;\n      return;\n    }\n\n    this.enemiesSprites.getChildren().forEach(enemy => {\n      enemy.canSeeHero = enemy.body.embedded;\n\n      if (!enemy.canSeeHero && enemy.isFollowingHero) {\n        enemy.isFollowingHero = false;\n        this.gridEngine.setSpeed(enemy.name, enemy.speed);\n        this.gridEngine.moveRandomly(enemy.name, 1000, 4);\n      }\n    });\n    this.heroActionCollider.update();\n\n    if (this.cursors.left.isDown) {\n      this.gridEngine.move(\"hero\", \"left\");\n    } else if (this.cursors.right.isDown) {\n      this.gridEngine.move(\"hero\", \"right\");\n    } else if (this.cursors.up.isDown) {\n      this.gridEngine.move(\"hero\", \"up\");\n    } else if (this.cursors.down.isDown) {\n      this.gridEngine.move(\"hero\", \"down\");\n    }\n  }\n\n}","map":{"version":3,"sources":["/var/www/html/chat-app/game/src/game/scenes/GameScene.js"],"names":["Input","Math","PhaserMath","Scene","createInteractiveGameObject","ATTACK_DELAY_TIME","BOX_INDEX","BUSH_INDEX","ENEMY_AI_TYPE","NPC_MOVEMENT_RANDOM","SCENE_FADE_TIME","GameScene","constructor","enterKey","spaceKey","cursors","isShowingDialog","isTeleporting","isAttacking","init","data","initData","calculatePreviousTeleportPosition","currentPosition","gridEngine","getPosition","facingDirection","getFacingDirection","x","y","getFramesForAnimation","assetKey","animation","anims","generateFrameNames","filter","frame","includes","parts","split","Boolean","Number","isNaN","parseInt","sort","a","b","createPlayerWalkingAnimation","animationName","create","key","frames","replace","frameRate","repeat","yoyo","createPlayerAttackAnimation","getStopFrame","direction","spriteKey","getOppositeDirection","getBackPosition","position","extractTeleportDataFromTiled","mapKey","trim","extractNpcDataFromTiled","npcKey","config","movementType","delay","area","calculateHeroHealthState","health","calculateHeroHealthStates","Array","from","length","heroSprite","maxHealth","fill","map","v","index","max","updateHeroHealthUi","healthStates","customEvent","CustomEvent","detail","window","dispatchEvent","updateHeroCoinUi","heroCoins","getEnemySpecies","enemyType","getEnemyColor","getEnemyAttackSpeed","spawnItem","isDebugMode","physics","debug","itemChance","Between","itemType","item","add","sprite","setDepth","setOrigin","itemsSprites","play","calculatePushTilePosition","camera","cameras","main","game","sys","heroStatus","initialPosition","initialFrame","initialFacingDirection","previousPosition","heroHealth","heroMaxHealth","coin","heroCoin","canPush","heroCanPush","haveSword","heroHaveSword","haveApple","heroHaveApple","haveAvocado","heroHaveAvocado","haveBanana","heroHaveBanana","haveCherries","heroHaveCherries","haveOrange","heroHaveOrange","havePineapple","heroHavePineapple","haveWatermelon","heroHaveWatermelon","fadeIn","input","keyboard","addKey","Keyboard","KeyCodes","ENTER","SPACE","createCursorKeys","make","tilemap","addTilesetImage","phaserGame","restoreHealth","restore","min","increaseMaxHealth","increase","collectCoin","coinQuantity","takeDamage","damage","time","delayedCall","fadeOut","scene","start","tweens","targets","alpha","ease","Easing","Elastic","InOut","duration","body","setSize","setOffset","heroActionCollider","heroPresenceCollider","heroObjectCollider","group","exists","enemiesData","elementsLayers","i","layers","layer","createLayer","properties","forEach","property","value","name","collider","npcsKeys","dataLayer","getObjectLayer","objects","type","customCollider","overlap","objA","objB","JustDown","characterName","dialogBoxFinishedEventListener","removeEventListener","addEventListener","enemyAI","speed","push","enemySpecies","enemyName","teleportToMapKey","teleportToX","teleportToY","overlapCollider","world","removeCollider","restart","startFollow","setFollowOffset","width","height","setBounds","widthInPixels","scale","gameSize","heightInPixels","setPosition","gridEngineConfig","characters","id","startPosition","offsetY","question","localStorage","getItem","find","obj","setVisible","destroy","console","log","enemiesSprites","enemyData","enemy","setTint","updateFollowHeroPosition","lastKnowHeroPosition","isSpaceJustDown","on","npcSprites","npcData","npc","animationFrame","moveRandomly","isMoving","canSeeHero","isFollowingHero","heroPosition","heroBackPosition","enemyPosition","setSpeed","ceil","moveTo","NoPathFoundStrategy","embedded","movementStarted","subscribe","charId","getChildren","npcSprite","texture","enemySprite","movementStopped","stop","setFrame","directionChanged","update","setX","setY","stopMovement","tile","wasHandled","pixelX","pixelY","newPosition","canBePushed","every","t","tilemapLayer","getTileAtWorldXY","ge_collide","isMoved","onComplete","newTile","putTileAt","left","isDown","move","right","up","down"],"mappings":"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","sourcesContent":["import { Input, Math as PhaserMath, Scene } from \"phaser\";\nimport { createInteractiveGameObject } from \"../utils\";\nimport {\n  ATTACK_DELAY_TIME,\n  BOX_INDEX,\n  BUSH_INDEX,\n  ENEMY_AI_TYPE,\n  NPC_MOVEMENT_RANDOM,\n  SCENE_FADE_TIME,\n} from \"../constants\";\n\nexport default class GameScene extends Scene {\n  constructor() {\n    super(\"GameScene\");\n  }\n\n  enterKey = {};\n  spaceKey = {};\n  cursors = {};\n  // wasd = {};\n  isShowingDialog = false;\n  isTeleporting = false;\n  isAttacking = false;\n\n  init(data) {\n    this.initData = data;\n  }\n\n  calculatePreviousTeleportPosition() {\n    const currentPosition = this.gridEngine.getPosition(\"hero\");\n    const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n\n    switch (facingDirection) {\n      case \"up\": {\n        return {\n          x: currentPosition.x,\n          y: currentPosition.y + 1,\n        };\n      }\n\n      case \"right\": {\n        return {\n          x: currentPosition.x - 1,\n          y: currentPosition.y,\n        };\n      }\n\n      case \"down\": {\n        return {\n          x: currentPosition.x,\n          y: currentPosition.y - 1,\n        };\n      }\n\n      case \"left\": {\n        return {\n          x: currentPosition.x + 1,\n          y: currentPosition.y,\n        };\n      }\n\n      default: {\n        return {\n          x: currentPosition.x,\n          y: currentPosition.y,\n        };\n      }\n    }\n  }\n\n  getFramesForAnimation(assetKey, animation) {\n    return this.anims\n      .generateFrameNames(assetKey)\n      .filter((frame) => {\n        if (frame.frame.includes(`${assetKey}_${animation}`)) {\n          const parts = frame.frame.split(`${assetKey}_${animation}_`);\n          return Boolean(!Number.isNaN(Number.parseInt(parts[1], 10)));\n        }\n\n        return false;\n      })\n      .sort((a, b) => (a.frame < b.frame ? -1 : 1));\n  }\n\n  createPlayerWalkingAnimation(assetKey, animationName) {\n    this.anims.create({\n      key: `${assetKey}_${animationName}`,\n      frames: [\n        { key: assetKey, frame: `${assetKey}_${animationName}_01` },\n        {\n          key: assetKey,\n          frame: `${assetKey}_${animationName.replace(\"walking\", \"idle\")}_01`,\n        },\n        { key: assetKey, frame: `${assetKey}_${animationName}_02` },\n      ],\n      frameRate: 4,\n      repeat: -1,\n      yoyo: true,\n    });\n  }\n\n  createPlayerAttackAnimation(assetKey, animationName) {\n    this.anims.create({\n      key: `${assetKey}_${animationName}`,\n      frames: [\n        { key: assetKey, frame: `${assetKey}_${animationName}_01` },\n        { key: assetKey, frame: `${assetKey}_${animationName}_02` },\n        { key: assetKey, frame: `${assetKey}_${animationName}_03` },\n        { key: assetKey, frame: `${assetKey}_${animationName}_04` },\n        {\n          key: assetKey,\n          frame: `${assetKey}_${animationName.replace(\"attack\", \"idle\")}_01`,\n        },\n      ],\n      frameRate: 16,\n      repeat: 0,\n      yoyo: false,\n    });\n  }\n\n  getStopFrame(direction, spriteKey) {\n    switch (direction) {\n      case \"up\":\n        return `${spriteKey}_idle_up_01`;\n      case \"right\":\n        return `${spriteKey}_idle_right_01`;\n      case \"down\":\n        return `${spriteKey}_idle_down_01`;\n      case \"left\":\n        return `${spriteKey}_idle_left_01`;\n      default:\n        return null;\n    }\n  }\n\n  getOppositeDirection(direction) {\n    switch (direction) {\n      case \"up\":\n        return \"down\";\n      case \"right\":\n        return \"left\";\n      case \"down\":\n        return \"up\";\n      case \"left\":\n        return \"right\";\n      default:\n        return null;\n    }\n  }\n\n  getBackPosition(facingDirection, position) {\n    switch (facingDirection) {\n      case \"up\":\n        return {\n          ...position,\n          y: position.y + 1,\n        };\n      case \"right\":\n        return {\n          ...position,\n          x: position.x - 1,\n        };\n      case \"down\":\n        return {\n          ...position,\n          y: position.y - 1,\n        };\n      case \"left\":\n        return {\n          ...position,\n          x: position.x + 1,\n        };\n      default:\n        return position;\n    }\n  }\n\n  extractTeleportDataFromTiled(data) {\n    const [mapKey, position] = data.trim().split(\":\");\n    const [x, y] = position.split(\",\");\n\n    return {\n      mapKey,\n      x: Number.parseInt(x, 10),\n      y: Number.parseInt(y, 10),\n    };\n  }\n\n  extractNpcDataFromTiled(data) {\n    const [npcKey, config] = data.trim().split(\":\");\n    const [movementType, delay, area, direction] = config.split(\";\");\n\n    return {\n      npcKey,\n      movementType,\n      facingDirection: direction,\n      delay: Number.parseInt(delay, 10),\n      area: Number.parseInt(area, 10),\n    };\n  }\n\n  calculateHeroHealthState(health) {\n    if (health > 10) {\n      return \"full\";\n    }\n\n    if (health > 0) {\n      return \"half\";\n    }\n\n    return \"empty\";\n  }\n\n  calculateHeroHealthStates() {\n    return Array.from({ length: this.heroSprite.maxHealth / 20 })\n      .fill(null)\n      .map((v, index) =>\n        this.calculateHeroHealthState(\n          Math.max(this.heroSprite.health - 20 * index, 0)\n        )\n      );\n  }\n\n  updateHeroHealthUi(healthStates) {\n    const customEvent = new CustomEvent(\"hero-health\", {\n      detail: {\n        healthStates,\n      },\n    });\n\n    window.dispatchEvent(customEvent);\n  }\n\n  updateHeroCoinUi(heroCoins) {\n    const customEvent = new CustomEvent(\"hero-coin\", {\n      detail: {\n        heroCoins,\n      },\n    });\n\n    window.dispatchEvent(customEvent);\n  }\n\n  getEnemySpecies(enemyType) {\n    if (enemyType.includes(\"slime\")) {\n      return \"slime\";\n    }\n\n    return \"slime\";\n  }\n\n  getEnemyColor(enemyType) {\n    if (enemyType.includes(\"red\")) {\n      return 0xf1374b;\n    }\n\n    if (enemyType.includes(\"green\")) {\n      return 0x2bbd6e;\n    }\n\n    if (enemyType.includes(\"yellow\")) {\n      return 0xffff4f;\n    }\n\n    return 0x00a0dc;\n  }\n\n  getEnemyAttackSpeed(enemyType) {\n    if (enemyType.includes(\"red\")) {\n      return 2000;\n    }\n\n    if (enemyType.includes(\"green\")) {\n      return 3000;\n    }\n\n    if (enemyType.includes(\"yellow\")) {\n      return 4000;\n    }\n\n    return 5000;\n  }\n\n  spawnItem(position) {\n    const isDebugMode = this.physics.config.debug;\n    const itemChance = PhaserMath.Between(1, isDebugMode ? 2 : 5);\n    if (itemChance === 1) {\n      const itemType = PhaserMath.Between(1, 2);\n\n      if (itemType === 1) {\n        const item = this.physics.add\n          .sprite(position.x, position.y, \"heart\")\n          .setDepth(1)\n          .setOrigin(0, 0);\n        item.itemType = \"heart\";\n        this.itemsSprites.add(item);\n        item.anims.play(\"heart_idle\");\n      } else if (itemType === 2) {\n        const item = this.physics.add\n          .sprite(position.x, position.y, \"coin\")\n          .setDepth(1)\n          .setOrigin(0, 0);\n        item.itemType = \"coin\";\n        this.itemsSprites.add(item);\n        item.anims.play(\"coin_idle\");\n      }\n    }\n  }\n\n  calculatePushTilePosition() {\n    const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n    const position = this.gridEngine.getPosition(\"hero\");\n\n    switch (facingDirection) {\n      case \"up\":\n        return {\n          x: position.x * 16,\n          y: (position.y - 2) * 16,\n        };\n\n      case \"right\":\n        return {\n          x: (position.x + 2) * 16,\n          y: position.y * 16,\n        };\n\n      case \"down\":\n        return {\n          x: position.x * 16,\n          y: (position.y + 2) * 16,\n        };\n\n      case \"left\":\n        return {\n          x: (position.x - 2) * 16,\n          y: position.y * 16,\n        };\n\n      default:\n        return {\n          x: position.x * 16,\n          y: position.y * 16,\n        };\n    }\n  }\n\n  create() {\n    const camera = this.cameras.main;\n    const { game } = this.sys;\n    const isDebugMode = this.physics.config.debug;\n    const { heroStatus, mapKey } = this.initData;\n    const {\n      position: initialPosition,\n      frame: initialFrame,\n      facingDirection: initialFacingDirection,\n      previousPosition,\n      health: heroHealth,\n      maxHealth: heroMaxHealth,\n      coin: heroCoin,\n      canPush: heroCanPush,\n      haveSword: heroHaveSword,\n      haveApple: heroHaveApple,\n      haveAvocado: heroHaveAvocado,\n      haveBanana: heroHaveBanana,\n      haveCherries: heroHaveCherries,\n      haveOrange: heroHaveOrange,\n      havePineapple: heroHavePineapple,\n      haveWatermelon: heroHaveWatermelon,\n    } = heroStatus;\n\n    camera.fadeIn(SCENE_FADE_TIME);\n\n    this.enterKey = this.input.keyboard.addKey(Input.Keyboard.KeyCodes.ENTER);\n    this.spaceKey = this.input.keyboard.addKey(Input.Keyboard.KeyCodes.SPACE);\n    this.cursors = this.input.keyboard.createCursorKeys();\n    // this.wasd = this.input.keyboard.addKeys({\n    //     up: Input.Keyboard.KeyCodes.W,\n    //     down: Input.Keyboard.KeyCodes.S,\n    //     left: Input.Keyboard.KeyCodes.A,\n    //     right: Input.Keyboard.KeyCodes.D,\n    // });\n\n    // Map\n    const map = this.make.tilemap({ key: mapKey });\n    map.addTilesetImage(\"tileset\", \"tileset\");\n\n    if (isDebugMode) {\n      window.phaserGame = game;\n      this.map = map;\n    }\n\n    // Hero\n    this.heroSprite = this.physics.add\n      .sprite(0, 0, \"hero\", initialFrame)\n      .setDepth(1);\n    this.heroSprite.health = heroHealth;\n    this.heroSprite.maxHealth = heroMaxHealth;\n    this.heroSprite.coin = heroCoin;\n    this.heroSprite.canPush = heroCanPush;\n    this.heroSprite.haveSword = heroHaveSword;\n    this.heroSprite.haveApple = heroHaveApple;\n    this.heroSprite.haveAvocado = heroHaveAvocado;\n    this.heroSprite.haveBanana = heroHaveBanana;\n    this.heroSprite.haveCherries = heroHaveCherries;\n    this.heroSprite.haveOrange = heroHaveOrange;\n    this.heroSprite.havePineapple = heroHavePineapple;\n    this.heroSprite.haveWatermelon = heroHaveWatermelon;\n    this.updateHeroHealthUi(this.calculateHeroHealthStates());\n    this.updateHeroCoinUi(heroCoin);\n\n    this.heroSprite.restoreHealth = (restore) => {\n      this.heroSprite.health = Math.min(\n        this.heroSprite.health + restore,\n        this.heroSprite.maxHealth\n      );\n      this.updateHeroHealthUi(this.calculateHeroHealthStates());\n    };\n\n    this.heroSprite.increaseMaxHealth = (increase) => {\n      this.heroSprite.maxHealth += increase;\n      this.updateHeroHealthUi(this.calculateHeroHealthStates());\n    };\n\n    this.heroSprite.collectCoin = (coinQuantity) => {\n      this.heroSprite.coin = Math.min(this.heroSprite.coin + coinQuantity, 999);\n      this.updateHeroCoinUi(this.heroSprite.coin);\n    };\n\n    this.heroSprite.takeDamage = (damage) => {\n      this.time.delayedCall(180, () => {\n        this.heroSprite.health -= damage;\n        if (this.heroSprite.health <= 0) {\n          camera.fadeOut(SCENE_FADE_TIME);\n          this.updateHeroHealthUi([]);\n          this.updateHeroCoinUi(null);\n          this.time.delayedCall(SCENE_FADE_TIME, () => {\n            this.isTeleporting = false;\n            this.scene.start(\"GameOverScene\");\n          });\n        } else {\n          this.updateHeroHealthUi(this.calculateHeroHealthStates());\n          this.tweens.add({\n            targets: this.heroSprite,\n            alpha: 0,\n            ease: PhaserMath.Easing.Elastic.InOut,\n            duration: 70,\n            repeat: 1,\n            yoyo: true,\n          });\n        }\n      });\n    };\n    this.heroSprite.body.setSize(14, 14);\n    this.heroSprite.body.setOffset(9, 13);\n    this.heroActionCollider = createInteractiveGameObject(\n      this,\n      this.heroSprite.x + 9,\n      this.heroSprite.y + 36,\n      14,\n      8,\n      \"attack\",\n      isDebugMode\n    );\n    this.heroPresenceCollider = createInteractiveGameObject(\n      this,\n      this.heroSprite.x + 16,\n      this.heroSprite.y + 20,\n      320, // TODO\n      320, // TODO\n      \"presence\",\n      isDebugMode,\n      { x: 0.5, y: 0.5 }\n    );\n    this.heroObjectCollider = createInteractiveGameObject(\n      this,\n      this.heroSprite.x + 16,\n      this.heroSprite.y + 20,\n      24,\n      24,\n      \"object\",\n      isDebugMode,\n      { x: 0.5, y: 0.5 }\n    );\n\n    // Items\n    this.itemsSprites = this.add.group();\n    if (!this.anims.exists(\"heart_idle\")) {\n      this.anims.create({\n        key: \"heart_idle\",\n        frames: this.getFramesForAnimation(\"heart\", \"idle\"),\n        frameRate: 4,\n        repeat: -1,\n        yoyo: false,\n      });\n    }\n\n    if (!this.anims.exists(\"coin_idle\")) {\n      this.anims.create({\n        key: \"coin_idle\",\n        frames: this.getFramesForAnimation(\"coin\", \"idle\"),\n        frameRate: 4,\n        repeat: -1,\n        yoyo: false,\n      });\n    }\n\n    const enemiesData = [];\n    const elementsLayers = this.add.group();\n    for (let i = 0; i < map.layers.length; i++) {\n      const layer = map.createLayer(i, \"tileset\", 0, 0);\n      layer.layer.properties.forEach((property) => {\n        const { value, name } = property;\n\n        if (name === \"type\" && value === \"elements\") {\n          elementsLayers.add(layer);\n        }\n      });\n\n      this.physics.add.collider(this.heroSprite, layer);\n    }\n\n    const npcsKeys = [];\n    const dataLayer = map.getObjectLayer(\"actions\");\n    dataLayer.objects.forEach((data) => {\n      const { properties, x, y } = data;\n\n      properties.forEach((property) => {\n        const { name, type, value } = property;\n        switch (name) {\n          case \"dialog\": {\n            const customCollider = createInteractiveGameObject(\n              this,\n              x,\n              y,\n              16,\n              16,\n              \"dialog\",\n              isDebugMode\n            );\n\n            this.physics.add.overlap(\n              this.heroActionCollider,\n              customCollider,\n              (objA, objB) => {\n                if (this.isShowingDialog) {\n                  return;\n                }\n\n                if (Input.Keyboard.JustDown(this.enterKey)) {\n                  const characterName = value;\n                  const customEvent = new CustomEvent(\"new-dialog\", {\n                    detail: {\n                      characterName,\n                    },\n                  });\n\n                  window.dispatchEvent(customEvent);\n                  const dialogBoxFinishedEventListener = () => {\n                    window.removeEventListener(\n                      `${characterName}-dialog-finished`,\n                      dialogBoxFinishedEventListener\n                    );\n\n                    // just to consume the JustDown\n                    Input.Keyboard.JustDown(this.enterKey);\n                    Input.Keyboard.JustDown(this.spaceKey);\n\n                    this.time.delayedCall(100, () => {\n                      this.isShowingDialog = false;\n                    });\n                  };\n                  window.addEventListener(\n                    `${characterName}-dialog-finished`,\n                    dialogBoxFinishedEventListener\n                  );\n\n                  this.isShowingDialog = true;\n                }\n              }\n            );\n\n            break;\n          }\n\n          //   case \"npcData\": {\n          //     const { facingDirection, movementType, npcKey, delay, area } =\n          //       this.extractNpcDataFromTiled(value);\n\n          //     npcsKeys.push({\n          //       facingDirection,\n          //       movementType,\n          //       npcKey,\n          //       delay,\n          //       area,\n          //       x,\n          //       y,\n          //     });\n          //     break;\n          //   }\n\n          case \"itemData\": {\n            const [itemType] = value.split(\":\");\n\n            switch (itemType) {\n              case \"coin\": {\n                const item = this.physics.add\n                  .sprite(x, y, \"coin\")\n                  .setDepth(1)\n                  .setOrigin(0, 1);\n\n                item.itemType = \"coin\";\n                this.itemsSprites.add(item);\n                item.anims.play(\"coin_idle\");\n                break;\n              }\n\n              case \"heart_container\": {\n                const item = this.physics.add\n                  .sprite(x, y, \"heart_container\")\n                  .setDepth(1)\n                  .setOrigin(0, 1);\n\n                item.itemType = \"heart_container\";\n                this.itemsSprites.add(item);\n                break;\n              }\n\n              case \"heart\": {\n                const item = this.physics.add\n                  .sprite(x, y, \"heart\")\n                  .setDepth(1)\n                  .setOrigin(0, 1);\n\n                item.itemType = \"heart\";\n                this.itemsSprites.add(item);\n                item.anims.play(\"heart_idle\");\n                break;\n              }\n\n              case \"sword\": {\n                if (!heroHaveSword) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"sword\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"sword\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n              case \"apple\": {\n                if (!heroHaveApple) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"apple\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"apple\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n              case \"avocado\": {\n                if (!heroHaveAvocado) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"avocado\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"avocado\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n\n              case \"banana\": {\n                if (!heroHaveBanana) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"banana\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"banana\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n\n              case \"cherries\": {\n                if (!heroHaveCherries) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"cherries\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"cherries\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n              case \"orange\": {\n                if (!heroHaveOrange) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"orange\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"orange\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n              case \"pineapple\": {\n                if (!heroHavePineapple) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"pineapple\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"pineapple\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n              case \"watermelon\": {\n                if (!heroHaveWatermelon) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"watermelon\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"watermelon\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n\n              case \"push\": {\n                if (!heroCanPush) {\n                  const item = this.physics.add\n                    .sprite(x, y, \"push\")\n                    .setDepth(1)\n                    .setOrigin(0, 1);\n\n                  item.itemType = \"push\";\n                  this.itemsSprites.add(item);\n                }\n\n                break;\n              }\n\n              default: {\n                break;\n              }\n            }\n\n            break;\n          }\n\n          case \"enemyData\": {\n            const [enemyType, enemyAI, speed, health] = value.split(\":\");\n            enemiesData.push({\n              x,\n              y,\n              speed: Number.parseInt(speed, 10),\n              enemyType,\n              enemySpecies: this.getEnemySpecies(enemyType),\n              enemyAI,\n              enemyName: `${enemyType}_${enemiesData.length}`,\n              health: Number.parseInt(health, 10),\n            });\n            break;\n          }\n\n          case \"teleportTo\": {\n            const customCollider = createInteractiveGameObject(\n              this,\n              x,\n              y,\n              16,\n              16,\n              \"teleport\",\n              isDebugMode\n            );\n\n            const {\n              mapKey: teleportToMapKey,\n              x: teleportToX,\n              y: teleportToY,\n            } = this.extractTeleportDataFromTiled(value);\n\n            const overlapCollider = this.physics.add.overlap(\n              this.heroSprite,\n              customCollider,\n              () => {\n                // camera.stopFollow();\n                this.physics.world.removeCollider(overlapCollider);\n                const facingDirection =\n                  this.gridEngine.getFacingDirection(\"hero\");\n                camera.fadeOut(SCENE_FADE_TIME);\n                // this.scene.pause();\n                this.isTeleporting = true;\n                // this.gridEngine.stopMovement('hero');\n\n                this.time.delayedCall(SCENE_FADE_TIME, () => {\n                  this.isTeleporting = false;\n                  this.scene.restart({\n                    heroStatus: {\n                      position: { x: teleportToX, y: teleportToY },\n                      previousPosition:\n                        this.calculatePreviousTeleportPosition(),\n                      frame: `hero_idle_${facingDirection}_01`,\n                      facingDirection,\n                      health: this.heroSprite.health,\n                      maxHealth: this.heroSprite.maxHealth,\n                      coin: this.heroSprite.coin,\n                      canPush: this.heroSprite.canPush,\n                      haveSword: this.heroSprite.haveSword,\n                      haveApple: this.heroSprite.haveApple,\n                      haveAvocado: this.heroSprite.haveAvocado,\n                      haveBanana: this.heroSprite.haveBanana,\n                      haveCherries: this.heroSprite.haveCherries,\n                      haveOrange: this.heroSprite.haveOrange,\n                      havePineapple: this.heroSprite.havePineapple,\n                      haveWatermelon: this.heroSprite.haveWatermelon,\n                    },\n                    mapKey: teleportToMapKey,\n                  });\n                });\n              }\n            );\n\n            break;\n          }\n\n          default: {\n            break;\n          }\n        }\n      });\n    });\n\n    camera.startFollow(this.heroSprite, true);\n    camera.setFollowOffset(-this.heroSprite.width, -this.heroSprite.height);\n    camera.setBounds(\n      0,\n      0,\n      Math.max(map.widthInPixels, game.scale.gameSize.width),\n      Math.max(map.heightInPixels, game.scale.gameSize.height)\n    );\n\n    if (map.widthInPixels < game.scale.gameSize.width) {\n      camera.setPosition((game.scale.gameSize.width - map.widthInPixels) / 2);\n    }\n\n    if (map.heightInPixels < game.scale.gameSize.height) {\n      camera.setPosition(\n        camera.x,\n        (game.scale.gameSize.height - map.heightInPixels) / 2\n      );\n    }\n\n    const gridEngineConfig = {\n      characters: [\n        {\n          id: \"hero\",\n          sprite: this.heroSprite,\n          startPosition: initialPosition,\n          offsetY: 4,\n        },\n      ],\n    };\n\n    this.physics.add.overlap(\n      this.heroSprite,\n      this.itemsSprites,\n      (objA, objB) => {\n        const question = localStorage.getItem(\"question\");\n        const item = [objA, objB].find((obj) => obj !== this.heroSprite);\n\n        if (item.itemType === \"heart\") {\n          this.heroSprite.restoreHealth(20);\n          item.setVisible(false);\n          item.destroy();\n        }\n\n        if (item.itemType === \"coin\") {\n          this.heroSprite.collectCoin(1);\n          item.setVisible(false);\n          item.destroy();\n        }\n\n        if (item.itemType === \"heart_container\") {\n          this.heroSprite.increaseMaxHealth(20);\n          item.setVisible(false);\n          item.destroy();\n        }\n\n        if (item.itemType === \"sword\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          this.isShowingDialog = true;\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.haveSword = true;\n          item.setVisible(false);\n          item.destroy();\n        }\n        if (item.itemType === \"apple\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n          this.heroSprite.haveApple = true;\n          if (item.itemType === question) {\n            item.setVisible(false);\n            item.destroy();\n            this.isShowingDialog = true;\n          }\n        }\n        if (item.itemType === \"avocado\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.haveAvocado = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n        if (item.itemType === \"banana\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.haveBanana = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n\n        if (item.itemType === \"cherries\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.haveCherries = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n\n        if (item.itemType === \"orange\") {\n          console.log(\"123\");\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.haveOrange = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n\n        if (item.itemType === \"pineapple\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.havePineapple = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n\n        if (item.itemType === \"watermelon\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.haveWatermelon = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n\n        if (item.itemType === \"push\") {\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName: item.itemType,\n            },\n          });\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${item.itemType}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n            });\n          };\n          window.addEventListener(\n            `${item.itemType}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.heroSprite.canPush = true;\n          if (item.itemType === question) {\n            this.isShowingDialog = true;\n            item.setVisible(false);\n            item.destroy();\n          }\n        }\n      }\n    );\n\n    this.enemiesSprites = this.add.group();\n    enemiesData.forEach((enemyData, index) => {\n      const {\n        enemySpecies,\n        enemyType,\n        x,\n        y,\n        enemyName,\n        speed,\n        enemyAI,\n        health,\n      } = enemyData;\n      const enemy = this.physics.add.sprite(\n        0,\n        0,\n        enemyType,\n        `${enemySpecies}_idle_01`\n      );\n      enemy.setTint(this.getEnemyColor(enemyType));\n      enemy.name = enemyName;\n      enemy.enemyType = enemyType;\n      enemy.enemySpecies = enemySpecies;\n      enemy.enemyAI = enemyAI;\n      enemy.speed = speed;\n      enemy.health = health;\n      enemy.isAttacking = false;\n      enemy.updateFollowHeroPosition = true;\n      enemy.lastKnowHeroPosition = { x: 0, y: 0 };\n      enemy.body.setSize(14, 14);\n      enemy.body.setOffset(9, 21);\n      this.enemiesSprites.add(enemy);\n      enemy.takeDamage = (damage, isSpaceJustDown) => {\n        if (isSpaceJustDown) {\n          enemy.health -= damage;\n\n          if (enemy.health < 0) {\n            enemy.setVisible(false);\n            const position = this.gridEngine.getPosition(enemy.name);\n            this.spawnItem({\n              x: position.x * 16,\n              y: position.y * 16,\n            });\n            this.gridEngine.setPosition(enemy.name, { x: 1, y: 1 });\n            enemy.destroy();\n          } else {\n            this.tweens.add({\n              targets: enemy,\n              alpha: 0,\n              ease: PhaserMath.Easing.Elastic.InOut,\n              duration: 70,\n              repeat: 1,\n              yoyo: true,\n            });\n          }\n        }\n      };\n\n      if (!this.anims.exists(`${enemySpecies}_idle`)) {\n        this.anims.create({\n          key: `${enemySpecies}_idle`,\n          frames: this.getFramesForAnimation(enemySpecies, \"idle\"),\n          frameRate: 8,\n          repeat: -1,\n          yoyo: false,\n        });\n      }\n\n      if (!this.anims.exists(`${enemySpecies}_attack`)) {\n        this.anims.create({\n          key: `${enemySpecies}_attack`,\n          frames: this.getFramesForAnimation(enemySpecies, \"attack\"),\n          frameRate: 12,\n          repeat: 0,\n          yoyo: false,\n        });\n      }\n\n      if (!this.anims.exists(`${enemySpecies}_walking`)) {\n        this.anims.create({\n          key: `${enemySpecies}_walking`,\n          frames: this.getFramesForAnimation(enemySpecies, \"walking\"),\n          frameRate: 8,\n          repeat: -1,\n          yoyo: false,\n        });\n      }\n\n      if (!this.anims.exists(`${enemySpecies}_die`)) {\n        this.anims.create({\n          key: `${enemySpecies}_die`,\n          frames: this.getFramesForAnimation(enemySpecies, \"die\"),\n          frameRate: 8,\n          repeat: 0,\n          yoyo: false,\n        });\n      }\n\n      enemy.anims.play(`${enemySpecies}_idle`);\n      enemy.on(\"animationcomplete\", (animation) => {\n        if (animation.key.includes(\"attack\")) {\n          enemy.anims.play(`${enemySpecies}_idle`);\n        }\n      });\n\n      gridEngineConfig.characters.push({\n        id: enemyName,\n        sprite: enemy,\n        startPosition: { x: x / 16, y: y / 16 - 1 },\n        speed,\n        offsetY: -4,\n      });\n    });\n\n    const npcSprites = this.add.group();\n    npcsKeys.forEach((npcData) => {\n      const { npcKey, x, y, facingDirection = \"down\" } = npcData;\n      const npc = this.physics.add.sprite(\n        0,\n        0,\n        npcKey,\n        `${npcKey}_idle_${facingDirection}_01`\n      );\n      npc.body.setSize(14, 14);\n      npc.body.setOffset(9, 13);\n      npcSprites.add(npc);\n\n      this.createPlayerWalkingAnimation(npcKey, \"walking_up\");\n      this.createPlayerWalkingAnimation(npcKey, \"walking_right\");\n      this.createPlayerWalkingAnimation(npcKey, \"walking_down\");\n      this.createPlayerWalkingAnimation(npcKey, \"walking_left\");\n\n      gridEngineConfig.characters.push({\n        id: npcKey,\n        sprite: npc,\n        startPosition: { x: x / 16, y: y / 16 - 1 },\n        speed: 1,\n        offsetY: 4,\n      });\n    });\n\n    // Movement\n    this.createPlayerWalkingAnimation(\"hero\", \"walking_up\");\n    this.createPlayerWalkingAnimation(\"hero\", \"walking_right\");\n    this.createPlayerWalkingAnimation(\"hero\", \"walking_down\");\n    this.createPlayerWalkingAnimation(\"hero\", \"walking_left\");\n\n    // Attack\n    this.createPlayerAttackAnimation(\"hero\", \"attack_up\", 12, 0, false);\n    this.createPlayerAttackAnimation(\"hero\", \"attack_right\", 12, 0, false);\n    this.createPlayerAttackAnimation(\"hero\", \"attack_down\", 12, 0, false);\n    this.createPlayerAttackAnimation(\"hero\", \"attack_left\", 12, 0, false);\n\n    this.heroSprite.on(\"animationcomplete\", (animation, animationFrame) => {\n      if (animation.key.includes(\"attack\")) {\n        this.isAttacking = false;\n      }\n    });\n\n    this.heroSprite.on(\"animationstop\", (animation, animationFrame) => {\n      if (animation.key.includes(\"attack\")) {\n        this.isAttacking = false;\n      }\n    });\n\n    this.gridEngine.create(map, gridEngineConfig);\n\n    // NPCs\n    npcsKeys.forEach((npcData) => {\n      const { movementType, npcKey, delay, area } = npcData;\n\n      if (movementType === NPC_MOVEMENT_RANDOM) {\n        this.gridEngine.moveRandomly(npcKey, delay, area);\n      }\n    });\n\n    // enemies\n    enemiesData.forEach((enemyData) => {\n      const { enemyAI, enemyName, speed } = enemyData;\n\n      this.gridEngine.moveRandomly(enemyName, 1000, 4);\n    });\n    this.physics.add.overlap(\n      this.heroObjectCollider,\n      this.enemiesSprites,\n      (objA, objB) => {\n        const enemy = [objA, objB].find(\n          (obj) => obj !== this.heroObjectCollider\n        );\n        if (enemy.isAttacking || this.gridEngine.isMoving(enemy.name)) {\n          return;\n        }\n\n        enemy.anims.play(`${enemy.enemySpecies}_attack`);\n        this.heroSprite.takeDamage(10);\n        enemy.isAttacking = true;\n        this.time.delayedCall(this.getEnemyAttackSpeed(enemy.enemyType), () => {\n          enemy.isAttacking = false;\n        });\n      }\n    );\n\n    this.physics.add.overlap(\n      this.heroPresenceCollider,\n      this.enemiesSprites,\n      (objA, objB) => {\n        const enemy = [objA, objB].find(\n          (obj) => obj !== this.heroPresenceCollider\n        );\n\n        if (enemy.canSeeHero && enemy.enemyAI === ENEMY_AI_TYPE) {\n          enemy.isFollowingHero = true;\n          if (enemy.updateFollowHeroPosition) {\n            const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n            const heroPosition = this.gridEngine.getPosition(\"hero\");\n            const heroBackPosition = this.getBackPosition(\n              facingDirection,\n              heroPosition\n            );\n\n            if (\n              enemy.lastKnowHeroPosition.x !== heroBackPosition.x ||\n              enemy.lastKnowHeroPosition.y !== heroBackPosition.y\n            ) {\n              const enemyPosition = this.gridEngine.getPosition(enemy.name);\n              enemy.lastKnowHeroPosition = heroBackPosition;\n\n              if (\n                heroBackPosition.x === enemyPosition.x &&\n                heroBackPosition.y === enemyPosition.y\n              ) {\n                enemy.updateFollowHeroPosition = false;\n                // TODO can attack I guess\n                return;\n              }\n\n              enemy.updateFollowHeroPosition = false;\n              this.time.delayedCall(1000, () => {\n                enemy.updateFollowHeroPosition = true;\n              });\n\n              this.gridEngine.setSpeed(\n                enemy.name,\n                Math.ceil(enemy.speed * 1.5)\n              );\n              this.gridEngine.moveTo(enemy.name, heroBackPosition, {\n                NoPathFoundStrategy: \"CLOSEST_REACHABLE\",\n              });\n            }\n          }\n        }\n\n        enemy.canSeeHero = enemy.body.embedded;\n      }\n    );\n\n    // Animations\n    this.gridEngine.movementStarted().subscribe(({ charId, direction }) => {\n      if (charId === \"hero\") {\n        this.heroSprite.anims.play(`hero_walking_${direction}`);\n      } else {\n        const npc = npcSprites\n          .getChildren()\n          .find((npcSprite) => npcSprite.texture.key === charId);\n        if (npc) {\n          npc.anims.play(`${charId}_walking_${direction}`);\n          return;\n        }\n\n        const enemy = this.enemiesSprites\n          .getChildren()\n          .find((enemySprite) => enemySprite.name === charId);\n        if (enemy) {\n          enemy.anims.play(`${enemy.enemySpecies}_walking`);\n        }\n      }\n    });\n\n    this.gridEngine.movementStopped().subscribe(({ charId, direction }) => {\n      if (charId === \"hero\") {\n        this.heroSprite.anims.stop();\n        this.heroSprite.setFrame(this.getStopFrame(direction, charId));\n      } else {\n        const npc = npcSprites\n          .getChildren()\n          .find((npcSprite) => npcSprite.texture.key === charId);\n        if (npc) {\n          npc.anims.stop();\n          npc.setFrame(this.getStopFrame(direction, charId));\n          return;\n        }\n\n        const enemy = this.enemiesSprites\n          .getChildren()\n          .find((enemySprite) => enemySprite.name === charId);\n        if (enemy) {\n          enemy.anims.play(`${enemy.enemySpecies}_idle`, true);\n        }\n      }\n    });\n\n    this.gridEngine.directionChanged().subscribe(({ charId, direction }) => {\n      if (charId === \"hero\") {\n        this.heroSprite.setFrame(this.getStopFrame(direction, charId));\n      } else {\n        const npc = npcSprites\n          .getChildren()\n          .find((npcSprite) => npcSprite.texture.key === charId);\n        if (npc) {\n          npc.setFrame(this.getStopFrame(direction, charId));\n          return;\n        }\n\n        const enemy = this.enemiesSprites\n          .getChildren()\n          .find((enemySprite) => enemySprite.name === charId);\n        if (enemy) {\n          enemy.anims.play(`${enemy.enemySpecies}_idle`);\n        }\n      }\n    });\n\n    this.heroActionCollider.update = () => {\n      const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n      this.heroPresenceCollider.setPosition(\n        this.heroSprite.x + 16,\n        this.heroSprite.y + 20\n      );\n\n      this.heroObjectCollider.setPosition(\n        this.heroSprite.x + 16,\n        this.heroSprite.y + 20\n      );\n\n      switch (facingDirection) {\n        case \"down\": {\n          this.heroActionCollider.setSize(14, 8);\n          this.heroActionCollider.body.setSize(14, 8);\n          this.heroActionCollider.setX(this.heroSprite.x + 9);\n          this.heroActionCollider.setY(this.heroSprite.y + 36);\n\n          break;\n        }\n\n        case \"up\": {\n          this.heroActionCollider.setSize(14, 8);\n          this.heroActionCollider.body.setSize(14, 8);\n          this.heroActionCollider.setX(this.heroSprite.x + 9);\n          this.heroActionCollider.setY(this.heroSprite.y + 12);\n\n          break;\n        }\n\n        case \"left\": {\n          this.heroActionCollider.setSize(8, 14);\n          this.heroActionCollider.body.setSize(8, 14);\n          this.heroActionCollider.setX(this.heroSprite.x);\n          this.heroActionCollider.setY(this.heroSprite.y + 21);\n\n          break;\n        }\n\n        case \"right\": {\n          this.heroActionCollider.setSize(8, 14);\n          this.heroActionCollider.body.setSize(8, 14);\n          this.heroActionCollider.setX(this.heroSprite.x + 24);\n          this.heroActionCollider.setY(this.heroSprite.y + 21);\n\n          break;\n        }\n\n        default: {\n          break;\n        }\n      }\n    };\n\n    this.physics.add.overlap(\n      this.heroActionCollider,\n      npcSprites,\n      (objA, objB) => {\n        if (this.isShowingDialog) {\n          return;\n        }\n\n        const npc = [objA, objB].find((obj) => obj !== this.heroActionCollider);\n\n        if (Input.Keyboard.JustDown(this.enterKey)) {\n          if (this.gridEngine.isMoving(npc.texture.key)) {\n            return;\n          }\n\n          const characterName = npc.texture.key;\n          const customEvent = new CustomEvent(\"new-dialog\", {\n            detail: {\n              characterName,\n            },\n          });\n\n          window.dispatchEvent(customEvent);\n          const dialogBoxFinishedEventListener = () => {\n            window.removeEventListener(\n              `${characterName}-dialog-finished`,\n              dialogBoxFinishedEventListener\n            );\n            this.gridEngine.moveRandomly(characterName);\n\n            // just to consume the JustDown\n            Input.Keyboard.JustDown(this.enterKey);\n            Input.Keyboard.JustDown(this.spaceKey);\n\n            this.time.delayedCall(100, () => {\n              this.isShowingDialog = false;\n              const { delay, area } = npcsKeys.find(\n                (npcData) => npcData.npcKey === characterName\n              );\n              this.gridEngine.moveRandomly(characterName, delay, area);\n            });\n          };\n          window.addEventListener(\n            `${characterName}-dialog-finished`,\n            dialogBoxFinishedEventListener\n          );\n\n          this.isShowingDialog = true;\n          const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n          this.gridEngine.stopMovement(characterName);\n          npc.setFrame(\n            this.getStopFrame(\n              this.getOppositeDirection(facingDirection),\n              characterName\n            )\n          );\n        }\n      }\n    );\n\n    this.physics.add.overlap(\n      this.heroActionCollider,\n      elementsLayers,\n      (objA, objB) => {\n        const tile = [objA, objB].find(\n          (obj) => obj !== this.heroActionCollider\n        );\n\n        // Handles attack\n        if (tile?.index > 0 && !tile.wasHandled) {\n          switch (tile.index) {\n            case BUSH_INDEX: {\n              if (this.isAttacking) {\n                tile.wasHandled = true;\n\n                this.time.delayedCall(ATTACK_DELAY_TIME, () => {\n                  tile.setVisible(false);\n                  this.spawnItem({\n                    x: tile.pixelX,\n                    y: tile.pixelY,\n                  });\n                  tile.destroy();\n                });\n              }\n\n              break;\n            }\n\n            case BOX_INDEX: {\n              if (this.heroSprite.canPush && this.isAttacking) {\n                const newPosition = this.calculatePushTilePosition();\n                const canBePushed = map.layers.every((layer) => {\n                  const t = layer.tilemapLayer.getTileAtWorldXY(\n                    newPosition.x,\n                    newPosition.y\n                  );\n\n                  return !t?.properties?.ge_collide;\n                });\n\n                if (canBePushed && !tile.isMoved) {\n                  tile.isMoved = true;\n                  this.tweens.add({\n                    targets: tile,\n                    pixelX: newPosition.x,\n                    pixelY: newPosition.y,\n                    ease: \"Power2\", // PhaserMath.Easing\n                    duration: 700,\n                    onComplete: () => {\n                      tile.setVisible(false);\n                      const newTile = tile.layer.tilemapLayer.putTileAt(\n                        BOX_INDEX,\n                        newPosition.x / 16,\n                        newPosition.y / 16,\n                        true\n                      );\n\n                      newTile.properties = {\n                        ...tile.properties,\n                      };\n                      newTile.isMoved = true;\n                      tile.destroy();\n                    },\n                  });\n                }\n              }\n\n              break;\n            }\n\n            default: {\n              break;\n            }\n          }\n        }\n      }\n    );\n\n    this.physics.add.overlap(\n      this.heroActionCollider,\n      this.enemiesSprites,\n      (objA, objB) => {\n        const enemy = [objA, objB].find(\n          (obj) => obj !== this.heroActionCollider\n        );\n\n        // Handles attack\n        if (this.isAttacking) {\n          const isSpaceJustDown = this.isSpaceJustDown;\n          this.time.delayedCall(ATTACK_DELAY_TIME, () => {\n            enemy.takeDamage(25, isSpaceJustDown);\n          });\n        }\n      }\n    );\n  }\n\n  update() {\n    this.isSpaceJustDown = Input.Keyboard.JustDown(this.spaceKey);\n\n    if (this.isTeleporting || this.isAttacking || this.isShowingDialog) {\n      return;\n    }\n\n    if (\n      !this.gridEngine.isMoving(\"hero\") &&\n      this.isSpaceJustDown &&\n      this.heroSprite.haveApple &&\n      this.heroSprite.haveAvocado &&\n      this.heroSprite.haveBanana &&\n      this.heroSprite.haveCherries &&\n      this.heroSprite.haveOrange &&\n      this.heroSprite.havePineapple &&\n      this.heroSprite.haveWatermelon\n    ) {\n      const facingDirection = this.gridEngine.getFacingDirection(\"hero\");\n      this.heroSprite.anims.play(`hero_attack_${facingDirection}`);\n      this.isAttacking = true;\n      return;\n    }\n\n    this.enemiesSprites.getChildren().forEach((enemy) => {\n      enemy.canSeeHero = enemy.body.embedded;\n      if (!enemy.canSeeHero && enemy.isFollowingHero) {\n        enemy.isFollowingHero = false;\n        this.gridEngine.setSpeed(enemy.name, enemy.speed);\n        this.gridEngine.moveRandomly(enemy.name, 1000, 4);\n      }\n    });\n\n    this.heroActionCollider.update();\n    if (this.cursors.left.isDown) {\n      this.gridEngine.move(\"hero\", \"left\");\n    } else if (this.cursors.right.isDown) {\n      this.gridEngine.move(\"hero\", \"right\");\n    } else if (this.cursors.up.isDown) {\n      this.gridEngine.move(\"hero\", \"up\");\n    } else if (this.cursors.down.isDown) {\n      this.gridEngine.move(\"hero\", \"down\");\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}